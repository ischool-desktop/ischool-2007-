<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Aspose.Grid.Desktop</name>
    </assembly>
    <members>
        <member name="T:Aspose.Grid.Desktop.CellEventArgs">
            <summary>
            Provides data for grid cell events. 
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.CellEventArgs.Cell">
            <summary>
            Represents a grid cell.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.CellEventArgs.Argument">
            <summary>
            The argument of the event. 
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.CellEventHandler">
            <summary>
            Represents the method that intend to handle cell events. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event argument.</param>
        </member>
        <member name="T:Aspose.Grid.Desktop.CellRangeEventArgs">
            <summary>
            Provides data for grid cellrange events. 
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.CellRangeEventArgs.CellRange">
            <summary>
            Represents a cellrange object.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.CellRangeEventHandler">
            <summary>
            Represents the method that intend to handle cellrange events. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event argument.</param>
        </member>
        <member name="T:Aspose.Grid.Desktop.WorksheetEvents">
            <summary>
            Worksheet Events category.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.WorksheetEvents.RowHeaderClick">
            <summary>
            Row header is clicked.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.WorksheetEvents.RowHeaderDoubleClick">
            <summary>
            Row header is double clicked.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.WorksheetEvents.ColumnHeaderClick">
            <summary>
            Column header is clicked.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.WorksheetEvents.ColumnHeaderDoubleClick">
            <summary>
            Column header is double clicked.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.WorksheetEventArgs">
            <summary>
            Provides data for worksheet events.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.WorksheetEventArgs.Index">
            <summary>
            Gets row or column index of worksheet
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.WorksheetEventArgs.SheetEvents">
            <summary>
            Gets event category.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.WorksheetEventHandler">
            <summary>
            Represents the method that intend to handle worksheet events. 
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.CellControlEventArgs">
            <summary>
            Provides data for cell control events.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.CellControlEventArgs.Row">
            <summary>
            Gets row index of worksheet.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.CellControlEventArgs.Column">
            <summary>
            Gets column index of worksheet.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.CellControlEventHandler">
            <summary>
            Represents the method that intend to handle cell control events. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event argument.</param>
        </member>
        <member name="T:Aspose.Grid.Desktop.CellKeyEventArgs">
            <summary>
            Provides data for grid cell key events. 
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.CellKeyEventArgs.Row">
            <summary>
            Gets row index of worksheet.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.CellKeyEventArgs.Column">
            <summary>
            Gets column index of worksheet.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.CellKeyEventHandler">
            <summary>
            Represents the method that intend to handle cell key events. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event argument.</param>
        </member>
        <member name="T:Aspose.Grid.Desktop.CommentEventArgs">
            <summary>
            Provides data for comment events.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.CommentEventArgs.Row">
            <summary>
            Gets row index.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.CommentEventArgs.Column">
            <summary>
            Gets column index.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.CommentEventArgs.OldText">
            <summary>
            Gets old text data of comment
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.CommentEventArgs.NewText">
            <summary>
            Gets new text data of comment
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.CommentEventHandler">
            <summary>
            Represents the method that intend to handle comment events. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event argument.</param>
        </member>
        <member name="T:Aspose.Grid.Desktop.Formula.FormulaCellData">
            <summary>
            Summary description for FormulaCellData.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.Formula.FormulaProcessStatus">
            <summary>
            Enumerates formula cell's process status.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.Formula.FormulaProcessStatus.NoProcess">
            <summary>
            
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.Formula.FormulaProcessStatus.Processing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.Formula.FormulaProcessStatus.Processed">
            <summary>
            
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.Formula.FormulaProcessFlag">
            <summary>
            Use this struct,when process formula cell
            </summary>
        </member>
        <member name="F:Aspose.Cells.Cryptography.BigInteger.DEFAULT_LEN">
            <summary>
            Default length of a BigInteger in bytes
            </summary>
        </member>
        <member name="F:Aspose.Cells.Cryptography.BigInteger.length">
            <summary>
            The Length of this BigInteger
            </summary>
        </member>
        <member name="F:Aspose.Cells.Cryptography.BigInteger.data">
            <summary>
            The data for this BigInteger
            </summary>
        </member>
        <member name="F:Aspose.Cells.Cryptography.BigInteger.smallPrimes">
            <summary>
            	Table of primes below 2000.
            </summary>
            <remarks>
            	<para>
            	This table was generated using Mathematica 4.1 using the following function:
            	</para>
            	<para>
            		<code>
            		PrimeTable [x_] := Prime [Range [1, PrimePi [x]]]
            		PrimeTable [6000]
            		</code>
            	</para>
            </remarks>
        </member>
        <member name="M:Aspose.Cells.Cryptography.BigInteger.TestBit(System.UInt32)">
            <summary>
            Tests if the specified bit is 1.
            </summary>
            <param name="bitNum">The bit to test. The least significant bit is 0.</param>
            <returns>True if bitNum is set to 1, else false.</returns>
        </member>
        <member name="M:Aspose.Cells.Cryptography.BigInteger.Normalize">
            <summary>
                Normalizes this by setting the length to the actual number of
                uints used in data and by setting the sign to Sign.Zero if the
                value of this is 0.
            </summary>
        </member>
        <member name="T:Aspose.Cells.Cryptography.BigInteger.Kernel">
            <summary>
            Low level functions for the BigInteger
            </summary>
        </member>
        <member name="M:Aspose.Cells.Cryptography.BigInteger.Kernel.AddSameSign(Aspose.Cells.Cryptography.BigInteger,Aspose.Cells.Cryptography.BigInteger)">
            <summary>
            Adds two numbers with the same sign.
            </summary>
            <param name="bi1">A BigInteger</param>
            <param name="bi2">A BigInteger</param>
            <returns>bi1 + bi2</returns>
        </member>
        <member name="M:Aspose.Cells.Cryptography.BigInteger.Kernel.Compare(Aspose.Cells.Cryptography.BigInteger,Aspose.Cells.Cryptography.BigInteger)">
            <summary>
            Compares two BigInteger
            </summary>
            <param name="bi1">A BigInteger</param>
            <param name="bi2">A BigInteger</param>
            <returns>The sign of bi1 - bi2</returns>
        </member>
        <member name="M:Aspose.Cells.Cryptography.BigInteger.Kernel.SingleByteDivideInPlace(Aspose.Cells.Cryptography.BigInteger,System.UInt32)">
            <summary>
            Performs n / d and n % d in one operation.
            </summary>
            <param name="n">A BigInteger, upon exit this will hold n / d</param>
            <param name="d">The divisor</param>
            <returns>n % d</returns>
        </member>
        <member name="T:Aspose.Cells.Hackers.RsaSignatureVerifier">
            <summary>
            Performs RSA digital signature verification.
            </summary>
        </member>
        <member name="T:Aspose.Cells.Hackers.Pkcs1">
            <summary>
            Provides different Public-Key Cryptography Standards methods.
            </summary>
        </member>
        <member name="T:Aspose.Cells.Hackers.Rsa">
            <summary>
            Performs RSA encryption.
            </summary>
        </member>
        <member name="T:Aspose.Cells.Hackers.SmartComparator1">
            <summary>
            One of the comparators used for complication of byte buffers comparison.
            </summary>
        </member>
        <member name="M:Aspose.Cells.Hackers.SmartComparator1.AddBuffer1(System.IO.MemoryStream,System.Byte[],System.Int32)">
            <summary>
            The first buffer to compare should be passed here.
            </summary>
            <param name="dummyParam1"></param>
            <param name="buffer1">The buffer.</param>
            <param name="dummyParam2"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.Cells.Hackers.SmartComparator2">
            <summary>
            One of the comparators used for complication of byte buffers comparison.
            </summary>
        </member>
        <member name="M:Aspose.Cells.Hackers.SmartComparator2.#ctor(Aspose.Cells.Hackers.SmartComparator1,System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            The second buffer to compare must be passed here.
            </summary>
            <param name="dummyParam1"></param>
            <param name="buffer2">The buffer.</param>
            <param name="dummyParam2"></param>
            <param name="dummyParam3"></param>
        </member>
        <member name="M:Aspose.Cells.Hackers.SmartComparator2.AddComparator1(System.Int32[],Aspose.Cells.Hackers.SmartComparator1)">
            <summary>
            The first comparator must be added here.
            </summary>
            <param name="dummyParam1"></param>
            <param name="comparator1">The comparator.</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.Cells.Hackers.SmartComparator2.PerformComparison1(System.Boolean)">
            <summary>
            Performs comparison of the second half of the buffers.
            </summary>
            <param name="dummyParam1"></param>
        </member>
        <member name="M:Aspose.Cells.Hackers.SmartComparator2.PassControlToComparator3(System.String,System.Boolean)">
            <summary>
            Passes control to the comparator 3.
            </summary>
            <param name="dummyParam1"></param>
            <param name="isDummy">Must be false to really pass control.</param>
        </member>
        <member name="T:Aspose.Cells.Hackers.SmartComparator3">
            <summary>
            One of the comparators used for complication of byte buffers comparison.
            </summary>
        </member>
        <member name="M:Aspose.Cells.Hackers.SmartComparator3.#ctor(Aspose.Cells.Hackers.SmartComparator2)">
            <summary>
            Comparator 2 should be passed here.
            </summary>
            <param name="comparator2">Comparator 2.</param>
        </member>
        <member name="T:Aspose.Cells.Hackers.VerificationSupervisor">
            <summary>
            Contains flags set by the meaningful comparer methods. This is necessary to ensure
            that crackers have not cut out the entry point of the verification algorithm located
            in LicenseCore.VerifySignature() and all the methods have been called. The flags should
            be set by 3 comparer methods subsequently, each method must check if the previous method
            has been invoked. 
            
            Also see SignatureInvalidFlag in this class.
            </summary>
        </member>
        <member name="M:Aspose.Cells.Hackers.VerificationSupervisor.Clear">
            <summary>
            Made accessible so license unit tests can reset the static state properly.
            </summary>
        </member>
        <member name="M:Aspose.Cells.Hackers.VerificationSupervisor.EnsureIfAllMethodsInvoked">
            <summary>
            Returns 0x100 if all methods have been invoked properly, returns 0x1000 otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aspose.Cells.Hackers.VerificationSupervisor.SignatureInvalidFlag">
            <summary>
            If EnsureIfAllMethodsInvoked says that verification methods were called and 
            SignatureInvalidFlag is zero, then the  signature was verified and it was correct.
            
            This is set to greater than zero if signature verification failed at some stage.
            </summary>
        </member>
        <member name="P:Aspose.Cells.Hackers.VerificationSupervisor.MethodCalledFlag1">
            <summary>
            Used for checking if methods 1 and 2 were invoked. Initial value = 0x30. Method 1
            must check it and if it is 0x30, set it to 0xff, otherwise leave intact.
            Method 2 then must check it and if it is 0xff, set it to 0x80, otherwise leave intact.
            </summary>
        </member>
        <member name="P:Aspose.Cells.Hackers.VerificationSupervisor.MethodCalledFlag2">
            <summary>
            Used for checking if method 3 was invoked. Initial value = true. Method 3 must
            set it to false.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.EditionType">
            <summary>
            Specifies the edition type of the license.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.LicenseState">
            <summary>
            Represents possible license states.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.LicenseState.Evaluation">
            <summary>
            The license is Evaluation
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.LicenseState.Licensed">
            <summary>
            The license is a proper valid license.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.License">
            <summary>
            Provides methods to license the component.
            </summary>
            <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As license = New license
            License.SetLicense("MyLicense.lic")
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.License.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As license = New license
            License.SetLicense("MyLicense.lic")
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.License.SetLicense(System.String)">
            <summary>
            Licenses the component.
            </summary>
            <param name="licenseName">Can be a full or short file name or name of an embedded resource.
            Use an empty string to switch to evaluation mode.</param>
            <remarks>
            <p>Tries to find the license in the following locations:</p>
            <p>1. Explicit path.</p>
            <p>2. The folder of the component assembly.</p>
            <p>3. The folder of the client's calling assembly.</p>
            <p>4. The folder of the entry assembly.</p>
            <p>5. An embedded resource in the client's calling assembly.</p>
            
            <p><b>Note:</b>On the .NET Compact Framework, tries to find the license only in these locations:</p>
            <p>1. Explicit path.</p>
            <p>2. An embedded resource in the client's calling assembly.</p>
            </remarks>
            <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As License = New License
            license.SetLicense("MyLicense.lic")
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.License.SetLicense(System.IO.Stream)">
            <summary>
            Licenses the component.
            </summary>
            <param name="stream">A stream that contains the license.</param>
            <remarks>
            <p>Use this method to load a license from a stream.</p>
            </remarks>
            <example>
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense(myStream);
            
            
            [Visual Basic]
            
            Dim license as License = new License
            license.SetLicense(myStream)
            </code>
            </example>
        </member>
        <member name="T:Aspose.Grid.Desktop.LicenseCore">
            <summary>
            The actual code of the license class is put into an internal class and made into long functions to 
            make it harder for the crackers to find anything meaningful after the dlls were cracked in November 2005.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.LicenseCore.AsposeDot">
            <summary>
            Used in the product mapping to build full product name.
            This is to avoid other developers accidentally damaging this code when doing global rename.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.LicenseCore.SetLicenseCore(System.IO.Stream)">
            <summary>
            Note, this function was manually tuned (made complex) so it does not decompile in Reflector.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.LicenseCore.GetLicenseState">
            <summary>
            Call this from your component code to check if running evaluation version or not.
            </summary>
            <example>
            <code>
            if (Aspose.Words.LicenseCore.GetLicenseState() == LicenseState.Evaluation)
            	InjectWatermark();
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.LicenseCore.CheckEdition(Aspose.Grid.Desktop.EditionType,System.String)">
            <summary>
            Note, this function was manually tuned (made complex) so it does not decompile in Reflector.
            
            Call this when the user attempts to use a feature that is limited by edition type.
            Throws a message explaining the license limitation to the user.
            </summary>
            <remarks>
            Most of Aspose products are supposed to have just one edition type.
            Only complex products might have two edition types.
            When using two edition types, make sure it is easy for the client to select edition type they need.
            </remarks>
            <param name="wantEditionType">Specify edition type that is required to access your feature.</param>
            <param name="message">Message that explains what feature the user is trying to access.</param>
            <example>
            For example, adding an image to the document requires Enterprise edition.
            <code>
            Licensing2004.CheckEdition(EditionType.Enterprise, "You tried to add an image to the document.");
            //Proceed inserting the image.
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.LicenseCore.LoadLicense(System.Xml.XmlDocument)">
            <summary>
            Verifies the signature on the XML file and loads it into the license files, but does not check them.
            Made internal only for unit testing, do not call directly otherwise.
            
            Note, this function was manually tuned (made complex) so it does not decompile in Reflector.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.LicenseCore.MapOldProductName(System.String)">
            <summary>
            In January 2006 product names such as Aspose Word, Aspose Excel etc had to be changed. 
            This function maps these product names so old licenses can be used in new products.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.LicenseCore.LoadLicense(System.String)">
            <summary>
            See above. Use for unit testing only.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Aspose.Grid.Desktop.LicenseCore.VerifySignature(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Verifies that content of the data element has not been tampered with. Safe to pass nulls.
            
            Note there is no direct action taken inside this method if the signature is invalid.
            If the signature is invalid, the VerificationSupervisor.SignatureInvalidFlag is set to greater 
            than zero and you need to examine it somewhere later in your code. This is to confuse hackers.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.LicenseCore.ProbeLicense(System.String,System.Reflection.Assembly)">
            <summary>
            Tries to find the license in several locations:
            1. Explicit path.
            2. The folder of this assembly.
            3. The folder of the client's calling assembly.
            4. The folder of the entry assembly (does not apply for the .NET Compact Framework).
            5. An embedded resource in the client's calling assembly.
            </summary>
            <param name="licenseName">This can be full or short file name or name of an embedded resource.</param>
            <param name="callingAssembly">Client's calling assembly. Used to find license in embedded resource.</param>
            <returns>Returns a stream that contains the license or throws.</returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.LicenseCore.GetAssemblyPath(System.Reflection.Assembly)">
            <summary>
            Returns assembly path correctly even if the assembly is shadow-copied.
            Uses CodeBase instead of Location for that.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.LicenseCore.GetResourceByPartialName(System.Reflection.Assembly,System.String)">
            <summary>
            The resource names can get prefixed with customer's namespace, so I do a partial name search.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.LicenseCore.LoadBlackList">
            <summary>
            Loads and verifies black list from resource called Aspose.License.BlackList.xml which must be present.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.LicenseCore.GetStringValue(System.Xml.XmlElement,System.String)">
            <summary>
            Returns text from the child element of a specified parent element or empty string if the element was not found.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.LicenseCore.GetDateValue(System.Xml.XmlElement,System.String)">
            <summary>
            Gets date value from the specified XML element. Returns DateTime.MaxValue if the element is missing.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.LicenseCore.GetElementByName(System.Xml.XmlElement,System.String)">
            <summary>
            Xml helper function. Gets the first child element with the given name or null.
            I'm using this instead of XPath because XPath is not available on the .NET Compact Framework.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.LicenseCore.gProductNameMap">
            <summary>
            Maps old product names into new.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.LicenseCore.Products">
            <summary>
            Gets Aspose product names this license is for. 
            You need to specify value that matches the value specified in AssemblyProduct attribute.
            This is used to check that the license is suitable for this product.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.LicenseCore.EditionType">
            <summary>
            Gets edition type.
            You can use this to enable/disable some features depending on the edition type.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.LicenseCore.SerialNumber">
            <summary>
            Unique license number. Used to black list stolen licenses.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.LicenseCore.SubscriptionExpiry">
            <summary>
            Gets the last date of the subscription.
            This is to be checked against custom attribute on the assembly that contains the relase date.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.LicenseCore.LicenseExpiry">
            <summary>
            This is for temporary licenses.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.LicenseCore.ProductNameMapping">
            <summary>
            Maps old product name into new.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.CopyStruct">
            <summary>
            Summary description for CopyStruct.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.VerticalAlignmentType">
            <summary>
            Specifies how a gridcell is vertically aligned.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.VerticalAlignmentType.Top">
            <summary>
            The object or text is aligned on the top of the gridcell.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.VerticalAlignmentType.Centred">
            <summary>
            The object or text is aligned in the center of the gridcell.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.VerticalAlignmentType.Bottom">
            <summary>
            The object or text is aligned on the bottom of the gridcell.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.VerticalAlignmentType.Justified">
            <summary>
            
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.VerticalAlignmentType.Distributed">
            <summary>
            
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.HorizontalAlignmentType">
            <summary>
            Specifies how a gridcell is horizontally aligned.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.HorizontalAlignmentType.General">
            <summary>
            If object type is number,object is aligned on the right of the girdcell.
            If object type is string,object is aligned on the left of the girdcell.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.HorizontalAlignmentType.Left">
            <summary>
            The object or text is aligned on the left of the gridcell.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.HorizontalAlignmentType.Centred">
            <summary>
            The object or text is aligned in the center of the gridcell.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.HorizontalAlignmentType.Right">
            <summary>
            The object or text is aligned on the right of the gridcell.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.HorizontalAlignmentType.Filled">
            <summary>
            The object or text is Filled in the gridcell.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.HorizontalAlignmentType.Justified">
            <summary>
            
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.HorizontalAlignmentType.CentredAcross">
            <summary>
            
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.HorizontalAlignmentType.Distributed">
            <summary>
            
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.InnerStyle">
            <summary>
            Summary description for InnerStyle.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.NumberFormats">
            <summary>
            Summary description for NumberFormats.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.NumberFormats.GetStringValue(System.String,System.String,System.Drawing.Color@)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="format"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.NumberFormats.GetStringValue(System.DateTime,System.String,System.Drawing.Color@)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="format"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.Grid.Desktop.BorderType">
            <summary>
            Specifies the border type for a gridCell.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.BorderType.Left">
            <summary>
            GridCell has Left border.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.BorderType.Right">
            <summary>
            GridCell has Right border.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.BorderType.Top">
            <summary>
            GridCell has Top border.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.BorderType.Bottom">
            <summary>
            GridCell has Bottom border.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.BorderType.DiagonalDown">
            <summary>
            GridCell has DiagonalDown border.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.BorderType.DiagonalUp">
            <summary>
            GridCell has DiagonalUp border.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.BorderLineType">
            <summary>
            Specifies the border line type for a gridCell.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.BorderLineType.None">
            <summary>
            No border.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.BorderLineType.Thin">
            <summary>
            A solid line border.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.BorderLineType.Medium">
            <summary>
            A solid line border.Line width is 2f.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.BorderLineType.Dashed">
            <summary>
            A dashed line border.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.BorderLineType.Dotted">
            <summary>
            A dotted line border.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.BorderLineType.Thick">
            <summary>
            A solid line border.Line width is 3f.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.BorderLineType.MediumDashed">
            <summary>
            A dashed line border.Line width is 2f.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.BorderLineType.ThinDashDotted">
            <summary>
            A dashDotted line border.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.BorderLineType.MediumDashDotted">
            <summary>
            A dashDotted line border.Line width is 2f.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.BorderLineType.ThinDashDotDotted">
            <summary>
            A dashDotDotted line border.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.BorderLineType.MediumDashDotDotted">
            <summary>
            A dashDotDotted line border.Line width is 2f.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.StyleSet">
            <summary>
            Specifies property information applied to style.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.StyleSet.All">
            <summary>
            Applies all properties to style.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.StyleSet.Color">
            <summary>
            Applies Color property to style.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.StyleSet.TextWrapped">
            <summary>
            Applies TextWrapped property to style.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.StyleSet.HAlignment">
            <summary>
            Applies HAlignment property to style.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.StyleSet.VAlignment">
            <summary>
            Applies VAlignment property to style.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.StyleSet.NumberFormat">
            <summary>
            Applies NumberFormat property to style.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.StyleSet.Custom">
            <summary>
            Applies Custom property to style.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.StyleSet.PatternColor">
            <summary>
            Applies PatternColor property to style.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.StyleSet.Shrink">
            <summary>
            Applies Shrink property to style.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.StyleSet.Border">
            <summary>
            Applies Border property to style.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.StyleSet.CellLocked">
            <summary>
            Applies CellLocked property to style.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.StyleSet.TextDirection">
            <summary>
            Applies TextDirection property to style.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.TextDirectionType">
            <summary>
            Represents text reading order.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.TextDirectionType.Context">
            <summary>
            
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.TextDirectionType.LeftToRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.TextDirectionType.RightToLeft">
            <summary>
            
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.Style">
            <summary>
            Represents display style, such as background color, alignment, border, number format, etc. 
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.Style.FORMAT">
            <summary>
            Built-in NumberFormats
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.Style.#ctor(Aspose.Grid.Desktop.GridDesktop)">
            <summary>
            Style Constructor.
            </summary>
            <param name="gridDesktop">GridDesktop object.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Style.Copy(Aspose.Grid.Desktop.Style)">
            <summary>
            Copies from another style.
            </summary>
            <param name="style">
            the style to copy from.
            </param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Style.Clone">
            <summary>
            Creates and returns a copy of this object.
            <b>NOTE:</b>If you clone a named style, name is not cloned becaule style name must be unique.
            Therefore, the cloned style will not "equals to" the original style.
            </summary>
            <returns>
            Return a new Style object.
            </returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.Style.GetBorderLine(Aspose.Grid.Desktop.BorderType)">
            <summary>
            Gets the border line type of the specified boder.
            </summary>
            <param name="borderType">borderType which border to get.</param>
            <returns>the border line type.</returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.Style.SetBorderLine(Aspose.Grid.Desktop.BorderType,Aspose.Grid.Desktop.BorderLineType)">
            <summary>
            Sets the border line type of the specified border.
            </summary>
            <param name="borderType">borderType which border to set.</param>
            <param name="borderLineType">borderLineType border line type of the specified border.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Style.GetBorderColor(Aspose.Grid.Desktop.BorderType)">
            <summary>
            Gets the color of the specified border.
            </summary>
            <param name="borderType">borderType which border to get.</param>
            <returns>color of the specified border.</returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.Style.SetBorderColor(Aspose.Grid.Desktop.BorderType,System.Drawing.Color)">
            <summary>
            Sets the color of the specified border.
            </summary>
            <param name="borderType">borderType which border to set.</param>
            <param name="color">of the specified border.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Style.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current Style.</returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.Style.Equals(System.Object)">
            <summary>
            Determines whether two Styles are equal.
            </summary>
            <param name="obj">The Style to compare with the current Style. </param>
            <returns>
            true if the specified Style is equal to the current Style; otherwise, false.
            </returns>
        </member>
        <member name="P:Aspose.Grid.Desktop.Style.Name">
            <summary>
            Gets or sets the name of the style.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Style.Custom">
            <summary>
            Gets or sets the custom number format string.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Style.CellLocked">
            <summary>
            Gets or sets CellLocked attribute.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Style.FormulaHidden">
            <summary>
            Gets or sets FormulaHidden attribute.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Style.TextWrapped">
            <summary>
            Gets or sets TextWrapped attribute.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Style.Shrink">
            <summary>
            Gets or sets Shrink to fit attribute.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Style.NumberFormat">
            <summary>
            Gets or sets built-in display format of numbers and dates.
            </summary>
            <remarks>
            <h5 class="dtH5">Built-in number formats:</h5>
            <div class="tablediv">
            	<table class="dtTABLE" cellspacing="0">
            	<tr><th width="10%">Index</th><th>Number Formats</th></tr>
            	<tr><td>0</td><td>General</td></tr>
            	<tr><td>1</td><td>0</td></tr>
            	<tr><td>2</td><td>0.00</td></tr>
            	<tr><td>3</td><td>#,##0</td></tr>
            	<tr><td>4</td><td>#,##0.00</td></tr>
            	<tr><td>5</td><td>\"$\"#,##0_);(\"$\"#,##0)</td></tr>
            	<tr><td>6</td><td>\"$\"#,##0_);[Red](\"$\"#,##0)</td></tr>
            	<tr><td>7</td><td>\"$\"#,##0.00_);(\"$\"#,##0.00)</td></tr>
            	<tr><td>8</td><td>\"$\"#,##0.00;[Red]\"$\"-#,##0.00</td></tr>
            	<tr><td>9</td><td>0%</td></tr>
            	<tr><td>10</td><td>0.00%</td></tr>
            	<tr><td>11</td><td>0.00E+00</td></tr>
            	<tr><td>12</td><td>#?/?</td></tr>
            	<tr><td>13</td><td>#??/??</td></tr>
            	<tr><td>14</td><td>m/d/yy</td></tr>
            	<tr><td>15</td><td>d-mmm-yy</td></tr>
            	<tr><td>16</td><td>d-mmm</td></tr>
            	<tr><td>17</td><td>mmm-yy</td></tr>
            	<tr><td>18</td><td>h:mm AM/PM</td></tr>
            	<tr><td>19</td><td>h:mm:ss AM/PM</td></tr>
            	<tr><td>20</td><td>h:mm</td></tr>
            	<tr><td>21</td><td>h:mm:ss</td></tr>
            	<tr><td>22</td><td>m/d/yy h:mm</td></tr>
            	<tr><td>23</td><td>\"$\"#,##0;[Red](\"$\"#,##0)</td></tr>
            	<tr><td>24</td><td>\"$\"#,##0.00;(\"$\"#,##0.00)</td></tr>
            	<tr><td>25</td><td>\"$\"#,##0.00;[Red](\"$\"#,##0.00)</td></tr>
            	<tr><td>26</td><td>\"$\"#,##0.00_);[Red](\"$\"#,##0.00)</td></tr>
            	<tr><td>27</td><td>M月D日</td></tr>
            	<tr><td>28</td><td>M月D日</td></tr>
            	<tr><td>29</td><td>M月D日</td></tr>
            	<tr><td>30</td><td>M/D/YY</td></tr>
            	<tr><td>31</td><td>YYYY年M月D日</td></tr>
            	<tr><td>32</td><td>h时mm分</td></tr>
            	<tr><td>33</td><td>h\时\"mm\"分\"ss\"秒\"</td></tr>
            	<tr><td>34</td><td>tth时mm分</td></tr>
            	<tr><td>35</td><td>tth时mm分ss秒</td></tr>
            	<tr><td>36</td><td>YYYY年M月</td></tr>
            	<tr><td>37</td><td>_(#,##0_);(#,##0)</td></tr>
            	<tr><td>38</td><td>_(#,##0_);[Red](#,##0)</td></tr>
            	<tr><td>39</td><td>_(#,##0.00_);(#,##0.00)</td></tr>
            	<tr><td>40</td><td>_(#,##0.00_);[Red](#,##0.00)</td></tr>
            	<tr><td>41</td><td>_(\"$\"*#,##0_);_(\"$\"*(#,##0);_(\"$\"*\"-\"_);_(@_)</td></tr>
            	<tr><td>42</td><td>_(*#,##0_);_(*(#,##0);_(*\-\"_);_(@_)</td></tr>
            	<tr><td>43</td><td>_(*#,##0.00_);_(*(#,##0.00);_(*\-\"??_);_(@_)</td></tr>
            	<tr><td>44</td><td>_(\"$\"*#,##0.00_);_(\"$\"*(#,##0.00);_(\"$\"*\"-\"??_);_(@_)</td></tr>
            	<tr><td>45</td><td>mm:ss</td></tr>
            	<tr><td>46</td><td>h:mm:ss</td></tr>
            	<tr><td>47</td><td>mm:ss.0</td></tr>
            	<tr><td>48</td><td>##0.0E+0</td></tr>
            	<tr><td>49</td><td>@</td></tr>
            	<tr><td>50</td><td>YYYY年M月</td></tr>
            	<tr><td>51</td><td>M月D日</td></tr>
            	<tr><td>52</td><td>YYYY年M月</td></tr>
            	<tr><td>53</td><td>M月D日</td></tr>
            	<tr><td>54</td><td>M月D日</td></tr>
            	<tr><td>55</td><td>tth时mm分</td></tr>
            	<tr><td>56</td><td>tth时mm分ss秒</td></tr>
            	<tr><td>57</td><td>YYYY年M月</td></tr>
            	<tr><td>58</td><td>M月D日</td></tr>
            	</table>
            </div>
            </remarks>
        </member>
        <member name="P:Aspose.Grid.Desktop.Style.HAlignment">
            <summary>
            Gets or sets horizontal alignment attribute.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Style.VAlignment">
            <summary>
            Gets or sets vertical alignment attribute.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Style.Rotation">
            <summary>
            Gets or sets Rotation attribute.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Style.Indent">
            <summary>
            Gets or sets indent level attribute. the indent level is 0-15.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Style.TextDirection">
            <summary>
            Gets or sets text direction attribute.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Style.PatternStyle">
            <summary>
            Gets or sets PatternStyle attribute.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Style.NumberFlag">
            <summary>
            Gets or sets NumberFlag attribute.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Style.AligmentFlag">
            <summary>
            Gets or sets AligmentFlag attribute.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Style.FontFlag">
            <summary>
            Gets or sets FontFlag attribute
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Style.BorderFlag">
            <summary>
            Gets or sets BorderFlag attribute.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Style.PatternsFlag">
            <summary>
            Gets or sets PatternsFlag attribute
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Style.ProtectionFlag">
            <summary>
            Gets or sets ProtectionFlag attribute
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Style.Color">
            <summary>
            Gets or sets the cell shading color.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Style.PatternColor">
            <summary>
            Gets or sets the pattern color.
            </summary>
        </member>
        <member name="F:AssemblyConstants.Product">
            <summary>
            This is used by Aspose licensing code to verify the license is for the correct product.
            </summary>
        </member>
        <member name="F:AssemblyConstants.ReleaseDate">
            <summary>
            This is used by Aspose licensing code to check for subscription expiry.
            You need to set this to the date you publish a release or a hotfix.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.Autofitter">
            <summary>
            Summary description for Autofitter.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.CellCollection">
            <summary>
            Encapsulates a collection of gridcell objects. 
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.CellCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets grid cell at specified row and column index.
            </summary>
            <param name="row">row index.</param>
            <param name="col">column index.</param>
        </member>
        <member name="P:Aspose.Grid.Desktop.CellCollection.Item(System.String)">
            <summary>
            Gets grid cell by specified cell name.
            </summary>
            <param name="cellName">cell name(in excel name format, like 'A1', 'F22')
            </param>
        </member>
        <member name="T:Aspose.Grid.Desktop.CellComment">
            <summary>
            Summary description for CellComment.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellComment.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellComment.Dispose(System.Boolean)">
            <summary> 
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellComment.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Aspose.Grid.Desktop.CellComment.StickyNote">
            <summary>
            
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.CellControl">
            <summary>
            Represents a cell control.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.CellRelative">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.CellRelative._worksheet">
            <summary>
            
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.CellRelative._row">
            <summary>
            
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.CellRelative._col">
            <summary>
            
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellRelative.#ctor(Aspose.Grid.Desktop.Worksheet,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellRelative.Clone">
            <summary>
            Clone this object.
            </summary>
            <returns>Copy of this object.</returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellControl.DrawControl(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only. 
            </summary>
            <param name="graphics"></param>
            <param name="rect"></param>
        </member>
        <member name="P:Aspose.Grid.Desktop.CellControl.Text">
            <summary>
            Gets or sets the text associated with this control.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.Button">
            <summary>
            Represents a cell button control.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.Button.DrawControl(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only. 
            </summary>
            <param name="graphics"></param>
            <param name="rect"></param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Button.Clone">
            <summary>
            Clone this object.
            </summary>
            <returns>Copy of this object.</returns>
        </member>
        <member name="P:Aspose.Grid.Desktop.Button.Width">
            <summary>
            Gets or sets the width of the control.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Button.Height">
            <summary>
            Gets or sets the height of the control.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Button.AlwaysVisible">
            <summary>
            Gets or sets if the Button should always visible, only work for Cell Control Button.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.CheckBox">
            <summary>
            Represents a cell checkbox control.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.CheckBox.Clone">
            <summary>
            Clone this object.
            </summary>
            <returns>Copy of this object.</returns>
        </member>
        <member name="P:Aspose.Grid.Desktop.CheckBox.Checked">
            <summary>
            Gets or set a value indicating whether the check box is in the checked state.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.ComboBox">
            <summary>
            Represents a cell combobox control.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.ComboBox.DrawControl(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal use only. 
            </summary>
            <param name="graphics"></param>
            <param name="rect"></param>
        </member>
        <member name="M:Aspose.Grid.Desktop.ComboBox.Clone">
            <summary>
            Clone this object.
            </summary>
            <returns>Copy of this object.</returns>
        </member>
        <member name="P:Aspose.Grid.Desktop.ComboBox.SelectedIndex">
            <summary>
            Gets or sets the index specifying the currently selected item.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.ComboBox.Width">
            <summary>
            Gets or sets the width of the list control.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.ComboBox.Height">
            <summary>
            Gets or sets the height of the list control.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.ComboBox.Items">
            <summary>
            Gets an object representing the collection of the items contained in this ComboBox.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.ComboBox.Values">
            <summary>
            Gets an object representing the collection of the values contained in this ComboBox.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.ComboBox.IsInputable">
            <summary>
            Indicates if the user can input text to the combobox.
            The inputted text will be saved as the cell's value.
            The default value is "false".
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.CellControlCollection">
            <summary>
            Encapsulates a collection of cell control. 
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.CellRelativeCollection">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellRelativeCollection.Remove(System.Int32,System.Int32)">
            <summary>
            Removes the item at the specified row column index of the cell.
            </summary>
            <param name="row">Row index of cell.</param>
            <param name="col">Column index of cell.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellRelativeCollection.Remove(System.String)">
            <summary>
            Removes the item by cell name.
            </summary>
            <param name="cellName">cell name(in excel name format, like 'A1', 'F22')</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellControlCollection.AddButton(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Adds a button to a specified cell at row column index.
            </summary>
            <param name="row">Row index of cell.</param>
            <param name="col">Column index of cell.</param>
            <param name="width">Width of button.</param>
            <param name="height">Height of button.</param>
            <param name="text">Button text.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellControlCollection.AddButton(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Adds a button to a specified cell by cell name.
            </summary>
            <param name="cellName">Name of grid cell.</param>
            <param name="width">Width of button.</param>
            <param name="height">Height of button.</param>
            <param name="text">Button text.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellControlCollection.AddButton(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Adds a button to a specified cell at row column index.
            </summary>
            <param name="row">Row index of cell.</param>
            <param name="col">Column index of cell.</param>
            <param name="width">Width of button.</param>
            <param name="height">Height of button.</param>
            <param name="text">Button text.</param>
            <param name="alwaysVisible">If the Button should always visible, only work for Cell Control Button.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellControlCollection.AddButton(System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Adds a button to a specified cell by cell name.
            </summary>
            <param name="cellName">Name of grid cell.</param>
            <param name="width">Width of button.</param>
            <param name="height">Height of button.</param>
            <param name="text">Button text.</param>
            <param name="alwaysVisible">If the Button should always visible, only work for Cell Control Button.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellControlCollection.AddCheckBox(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Adds a checkbox to a specified cell at row column index.
            </summary>
            <param name="row">Row index of cell.</param>
            <param name="col">Column index of cell.</param>
            <param name="check">Checkbox checked property state.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellControlCollection.AddCheckBox(System.String,System.Boolean)">
            <summary>
            Adds a checkbox to a specified cell by cell name.
            </summary>
            <param name="cellName">Name of grid cell.</param>
            <param name="check">Checkbox checked property state.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellControlCollection.AddComboBox(System.Int32,System.Int32,System.Collections.ICollection)">
            <summary>
            Adds a combobox to a specified cell at row column index.
            </summary>
            <param name="row">Row index of cell.</param>
            <param name="col">Column index of cell.</param>
            <param name="items">The collection of the items contained in ComboBox.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellControlCollection.AddComboBox(System.Int32,System.Int32,System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Adds a combobox to a specified cell at row column index.
            </summary>
            <param name="row">Row index of cell.</param>
            <param name="col">Column index of cell.</param>
            <param name="items">The collection of the items contained in ComboBox.</param>
            <param name="values">The collection of the values contained in ComboBox.</param>		
        </member>
        <member name="M:Aspose.Grid.Desktop.CellControlCollection.AddComboBox(System.String,System.Collections.ICollection)">
            <summary>
            Adds a combobox to a specified cell by cell name.
            </summary>
            <param name="cellName">Name of grid cell.</param>
            <param name="items">The collection of the items contained in ComboBox.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellControlCollection.AddComboBox(System.String,System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Adds a combobox to a specified cell by cell name.
            </summary>
            <param name="cellName">Name of grid cell.</param>
            <param name="items">The collection of the items contained in ComboBox.</param>
            <param name="values">The collection of the values contained in ComboBox.</param>
        </member>
        <member name="P:Aspose.Grid.Desktop.CellControlCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets the cell control at specified row and column index.
            </summary>
            <param name="row">row index.</param>
            <param name="col">column index.</param>
            <remarks>
            If there is not a CellControl object at specified row column index,
            this will check the column CellControl object.
            </remarks>
        </member>
        <member name="P:Aspose.Grid.Desktop.CellControlCollection.Item(System.String)">
            <summary>
            Gets the cell control by specified cell name.
            </summary>
            <param name="cellName">cell name(in excel name format, like 'A1', 'F22')
            </param>
            <remarks>
            If there is not a CellControl object at specified row column index,
            this will check the column CellControl object.
            </remarks>
        </member>
        <member name="T:Aspose.Grid.Desktop.CellKey">
            <summary>
            Summary description for CellKey.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.CellLocation">
            <summary>
            Indicates the cell location.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellLocation.#ctor">
            <summary>
            
            </summary>
            
            <example>
            
            <code>
            
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellLocation.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            
            <example>
            
            <code>
            
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellLocation.ToString">
            <summary>
            Override the ToString() of the object.
            </summary>
            
        </member>
        <member name="P:Aspose.Grid.Desktop.CellLocation.Column">
            <summary>
            Gets or sets the column of the cell location.
            </summary>
            
        </member>
        <member name="P:Aspose.Grid.Desktop.CellLocation.Row">
            <summary>
            Gets or sets the row of the cell location.
            </summary>
            
        </member>
        <member name="T:Aspose.Grid.Desktop.CellRange">
            <summary>
            Encapsulates the object that represents a range of cells within a spreadsheet. 
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellRange.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            CellRange Constructor.
            </summary>
            <param name="cStartRow">Start Row index.</param>
            <param name="cStartCol">Start Column index.</param>
            <param name="cEndRow">End Row index.</param>
            <param name="cEndCol">End Column index.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellRange.#ctor(System.String,System.String)">
            <summary>
            CellRange Constructor.
            </summary>
            <param name="startCellName">Start cell name.</param>
            <param name="endCellName">End cell name.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellRange.Copy(Aspose.Grid.Desktop.CellRange)">
            <summary>
            Copies from another CellRange object.
            </summary>
            <param name="cellRange">The CellRange object to copy from.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.CellRange.ToString">
            <summary>
            Returns a String that represents the current CellRange.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.CellRange.Worksheet">
            <summary>
            Gets worksheet object.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.CellRange.StartRow">
            <summary>
            Gets or sets the index of the start row of the range.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.CellRange.EndRow">
            <summary>
            Gets or sets the index of the end row of the range.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.CellRange.StartColumn">
            <summary>
            Gets or sets the index of the start column of the range.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.CellRange.EndColumn">
            <summary>
            Gets or sets the index of the end column of the range.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.CellRange.Address">
            <summary>
            Gets the address of CellRange object.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.ColumnCollection">
            <summary>
            Collects the objects that represent the individual columns in a worksheet.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.ColumnCollection.Item(System.Int32)">
            <summary>
            Gets a gridcolumn object at specified index.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.Comment">
            <summary>
            Encapsulates the object that represents a comment.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.Comment.Clone">
            <summary>
            Clone this object.
            </summary>
            <returns>Copy of this object.</returns>
        </member>
        <member name="P:Aspose.Grid.Desktop.Comment.Text">
            <summary>
            Represents the text of a Comment. 
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.CommentCollection">
            <summary>
            Encapsulates a collection of Comment objects.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.CommentCollection.Add(System.Int32,System.Int32,System.String)">
            <summary>
            Adds a comment to a specified cell at row column index.
            </summary>
            <param name="row">Row index of cell.</param>
            <param name="col">Column index of cell.</param>
            <param name="text">Text of comment.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.CommentCollection.Add(System.String,System.String)">
            <summary>
            Adds a comment to a specified cell by cell name.
            </summary>
            <param name="cellName">Name of grid cell.</param>
            <param name="text">Text of comment.</param>
        </member>
        <member name="P:Aspose.Grid.Desktop.CommentCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets the comment object at specified row and column index.
            </summary>
            <param name="row">row index.</param>
            <param name="col">column index.</param>
        </member>
        <member name="P:Aspose.Grid.Desktop.CommentCollection.Item(System.String)">
            <summary>
            Gets the comment object by specified cell name.
            </summary>
            <param name="cellName">cell name(in excel name format, like 'A1', 'F22')
            </param>
        </member>
        <member name="T:Aspose.Grid.Desktop.ExportDataTable">
            <summary>
            Exports data in the Cells collection of a Worksheet to a DataTable object. 
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.ExportDataTable.#ctor(Aspose.Grid.Desktop.Worksheet,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the ExportDataTable class.
            </summary>
            <param name="worksheet">A Worksheet object that the source data in </param>
            <param name="startRow">The row number of the first cell to export out.</param>
            <param name="startColumn">The column number of the first cell to export out.</param>
            <param name="rows">Number of rows to be imported.</param>
            <param name="columns">Number of columns to be imported.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.ExportDataTable.Export(System.Boolean,System.Boolean)">
            <summary>
            Exports data in the Cells collection of a Worksheet to a new DataTable object
            </summary>
            <param name="exportColumnName">Indicates whether the data in the first row are exported to the column name of the DataTable</param>
            <param name="isVertical">True if a row in Excel file represents a row in DataTable. False if a column in Excel file represents a row in DataTable.</param>
            <returns>Exported DataTable object.</returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.ExportDataTable.Export(System.Data.DataTable,System.Boolean)">
            <summary>
            Exports data in the Cells collection of a Worksheet to a specifed DataTable object. 
            </summary>
            <remarks>
            The method permits first create a DataTable object. Then exports data to the DataTable object. If dataTable don't be set valid, the method            /// will return a new DataTable object by calling overload method 'Export(bool exportColumnName, bool isVertical)'.
            </remarks>
            <param name="dataTable">The DataTable object that exports data to.</param>
            <param name="isVertical">True if a row in Excel file represents a row in DataTable. False if a column in Excel file represents a row in DataTable.</param>
            <returns>Exported DataTable object.</returns>
        </member>
        <member name="T:Aspose.Grid.Desktop.FormHyperlink">
            <summary>
            Summary description for FormHyperlink.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.FormHyperlink.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.FormHyperlink.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.FormHyperlink.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.frmCellStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.frmCellStyle.components">
            <summary>
            
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.frmCellStyle.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.frmCellStyle.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.GridCell">
            <summary>
            Encapsulates the object that represents a single grid cell. 
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridCell.SetCellValue(System.Object)">
            <summary>
            If the value is a formula,this method set cell's value as FormulaType,
            but not calculate formula.
            To calculate formula,need call GridDesktop.RunAllFormulas manually.
            If multi values to be set,call this method multi times,
            finally,call GridDesktop.RunAllFormulas method manually 
            to calculate formulas.
            This is more effective.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridCell.IsFormula">
            <summary>
            Indicates the cell is a formula or not.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridCell.SetStyle(Aspose.Grid.Desktop.Style)">
            <summary>
            Sets style to cell.
            To improve performance,implement "SetStyle" method,
            not implement "Style" property.
            </summary>
            <param name="style">style to be set.</param>
            <example>
            <code>
            [C#]
            Style style = sheet.GetCell(0, 0).GetStyle();
            style.CellLocked = true;
            style.VAlignment = VerticalAlignmentType.Top;
            ...
            sheet.GetCell(0, 0).SetStyle(style);
            
            [Visual Basic]
            Dim style As Style =  sheet.GetCell(0,0).GetStyle() 
            style.CellLocked = True
            style.VAlignment = VerticalAlignmentType.Top
            ...
            sheet.GetCell(0, 0).SetStyle(style)
            
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridCell.SetStyle(Aspose.Grid.Desktop.Style,Aspose.Grid.Desktop.StyleSet)">
            <summary>
            Sets style to cell.
            </summary>
            <param name="style">style to be set.</param>
            <param name="styleSet">specified which properties to apply to.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridCell.GetStyle">
            <summary>
            Gets cell style.
            When change the style,you should invoke "SetStyle" method,
            to set style to cell.
            </summary>
            <returns>return copy of cell style.</returns>
            <example>
            <code>
            [C#]
            Style style = sheet.GetCell(0, 0).GetStyle();
            style.CellLocked = true;
            style.VAlignment = VerticalAlignmentType.Top;
            ...
            sheet.GetCell(0, 0).SetStyle(style);
            
            [Visual Basic]
            Dim style As Style =  sheet.GetCell(0,0).GetStyle() 
            style.CellLocked = True
            style.VAlignment = VerticalAlignmentType.Top
            ...
            sheet.GetCell(0, 0).SetStyle(style)
            
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridCell.GetFont">
            <summary>
            Gets cell font.
            When change the font, you should invoke "SetFont" method,
            to set font to cell.
            </summary>
            <returns>return copy of cell font.</returns>
            <example>
            <code>
            [C#]
            GridCell cell = gridDesktop1.GetActiveWorksheet().Cells[0, 0];
            Font font = new Font("Courier New", 8, FontStyle.Italic);
            cell.SetFont(font);
            Color color = cell.GetFontColor();
            color = Color.Black;
            cell.SetFontColor(color);
            
            [Visual Basic]
            Dim cell As GridCell =  gridDesktop1.GetActiveWorksheet().Cells(0, 0) 
            Dim font As Font =  New Font("Courier New",8,FontStyle.Italic) 
            cell.SetFont(font)
            Dim color As Color =  cell.GetFontColor() 
            color = Color.Black
            cell.SetFontColor(color)
            
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridCell.GetFontColor">
            <summary>
            Gets cell font color.
            When change the color,you should invoke "SetFontColor" method,
            to set font color to cell.
            </summary>
            <returns>return cell font color.</returns>
            <example>
            <code>
            [C#]
            GridCell cell = gridDesktop1.GetActiveWorksheet().Cells[0, 0];
            Font font = new Font("Courier New", 8, FontStyle.Italic);
            cell.SetFont(font);
            Color color = cell.GetFontColor();
            color = Color.Black;
            cell.SetFontColor(color);
            
            [Visual Basic]
            Dim cell As GridCell =  gridDesktop1.GetActiveWorksheet().Cells(0, 0) 
            Dim font As Font =  New Font("Courier New",8,FontStyle.Italic) 
            cell.SetFont(font)
            Dim color As Color =  cell.GetFontColor() 
            color = Color.Black
            cell.SetFontColor(color)
            
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridCell.SetFont(System.Drawing.Font)">
            <summary>
            Sets font to cell.
            To improve performance,implement "SetFont" method,
            not implement "Font" property.
            </summary>
            <param name="font">font to be set.</param>
            <example>
            <code>
            [C#]
            GridCell cell = gridDesktop1.GetActiveWorksheet().Cells[0, 0];
            Font font = new Font("Courier New", 8, FontStyle.Italic);
            cell.SetFont(font);
            Color color = cell.GetFontColor();
            color = Color.Black;
            cell.SetFontColor(color);
            
            [Visual Basic]
            Dim cell As GridCell =  gridDesktop1.GetActiveWorksheet().Cells(0, 0) 
            Dim font As Font =  New Font("Courier New",8,FontStyle.Italic) 
            cell.SetFont(font)
            Dim color As Color =  cell.GetFontColor() 
            color = Color.Black
            cell.SetFontColor(color)
            
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridCell.SetFontColor(System.Drawing.Color)">
            <summary>
            Sets font color to cell.
            To improve performance,implement "SetFontColor" method,
            not implement "FontColor" property.
            </summary>
            <param name="color">font color to be set.</param>
            <example>
            <code>
            [C#]
            GridCell cell = gridDesktop1.GetActiveWorksheet().Cells[0, 0];
            Font font = new Font("Courier New", 8, FontStyle.Italic);
            cell.SetFont(font);
            Color color = cell.GetFontColor();
            color = Color.Black;
            cell.SetFontColor(color);
            
            [Visual Basic]
            Dim cell As GridCell =  gridDesktop1.GetActiveWorksheet().Cells(0, 0) 
            Dim font As Font =  New Font("Courier New",8,FontStyle.Italic) 
            cell.SetFont(font)
            Dim color As Color =  cell.GetFontColor() 
            color = Color.Black
            cell.SetFontColor(color)
            
            </code>
            </example>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridCell.Worksheet">
            <summary>
            Gets worksheet object.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridCell.Row">
            <summary>
            Gets cell row index.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridCell.Column">
            <summary>
            Gets cell column index.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridCell.Name">
            <summary>
            Gets cell name.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridCell.Location">
            <summary>
            Gets GridCell location.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridCell.Value">
            <summary>
            Gets or sets a cell value.
            If value is formula,
            the set method of this property will call GridDesktop.RunAllFormulas method automatic.
            So, if there are many formulas, using SetCellValue method instead of this property.
            SetCellValue method will enhance performance.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridCell.Formula">
            <summary>
            Read only,to set formula,use Value set attribute.
            If cell value is not a formula,returns null.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridCell.Protected">
            <summary>
            Indicates if the cell is protected.
            If the value is "true", user can not modify the cell through the user interface.
            This attribute has nothing to do with the Style.CellLocked property  
            and will not be saved to file when grid data exported.
            The default value is "false".
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.GridColumn">
            <summary>
            Represents s single column in worksheet.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.GridColumn.DEFAULT_WIDTH">
            <summary>
            Default width of gridcolumn.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridColumn.GetStyle">
            <summary>
            Gets style object of column.
            </summary>
            <returns>Style object of column.</returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridColumn.SetStyle(Aspose.Grid.Desktop.Style)">
            <summary>
            Sets style object to column.
            </summary>
            <param name="style">Style object to be set.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridColumn.SetStyle(Aspose.Grid.Desktop.Style,Aspose.Grid.Desktop.StyleSet)">
            <summary>
            Sets style object to column.
            </summary>
            <param name="style">Style object to be set.</param>
            <param name="styleSet">specified which properties to apply to.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridColumn.GetFont">
            <summary>
            Gets font object of column.
            </summary>
            <returns>Font object of column.</returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridColumn.GetFontColor">
            <summary>
            Gets font color of column.
            </summary>
            <returns>Font color of column.</returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridColumn.SetFont(System.Drawing.Font)">
            <summary>
            Sets font object to column.
            </summary>
            <param name="font">Font object to be set.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridColumn.SetFontColor(System.Drawing.Color)">
            <summary>
            Sets font color to column.
            </summary>
            <param name="color">Font color to be set.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridColumn.AddValidation(System.Boolean,System.String)">
            <summary>
            Adds a validation to the column.
            </summary>
            <param name="isRequired">Value indicating whether cell value of this column is required.</param>
            <param name="regEx">Regular expression.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridColumn.AddValidatoin(Aspose.Grid.Desktop.ICustomValidation)">
            <summary>
            Adds a validation to the column.
            </summary>
            <param name="customValidation">Custom validaton object.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridColumn.RemoveValidation">
            <summary>
            Removes the validation object of the column.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridColumn.AddButton(System.Int32,System.Int32,System.String)">
            <summary>
            Adds a button to the column.
            </summary>
            <param name="width">Width of button.</param>
            <param name="height">Height of button.</param>
            <param name="text">Button text.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridColumn.AddCheckBox">
            <summary>
            Adds a checkbox to the column.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridColumn.AddCheckBox(System.Boolean)">
            <summary>
            Adds a checkbox to the column.
            </summary>
            <param name="check">Checkbox checked property state.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridColumn.AddComboBox(System.Collections.ICollection)">
            <summary>
            Adds a combobox to the column.
            </summary>
            <param name="items">The collection of the items contained in ComboBox.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridColumn.AddComboBox(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Adds a combobox to the column.
            </summary>
            <param name="items">The collection of the items contained in ComboBox.</param>
            <param name="values">The collection of the values contained in ComboBox.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridColumn.RemoveCellControl">
            <summary>
            Removes the CellControl object of the column.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridColumn.Worksheet">
            <summary>
            Gets worksheet object.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridColumn.Index">
            <summary>
            Gets index of column object.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridColumn.Width">
            <summary>
            Gets or sets the width of column object.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridColumn.Hidden">
            <summary>
            Gets or sets the hidden of column object.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridColumn.Header">
            <summary>
            Gets or sets the header of column object.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridColumn.Validation">
            <summary>
            Gets the validation object of the column.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridColumn.CellControl">
            <summary>
            Gets the CellControl object of the column.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.GridDesktop">
            <summary>
            Aspose GridDesktop class
            Represents a root object to create an GridDesktop control. To use this control, simply drag it from your toolbox to a form or usercontrol. 
            </summary>
            <remarks>
            Please refer to .NET SDK document about further information about System.Windows.Forms.UserControl.
            </remarks>
            <example>
            <code>
            [C#]
            gridDesktop1.Worksheets[0].Cells[0, 0].Value = "2";
            gridDesktop1.Worksheets[0].Cells[1, 0].Value = "3";
            gridDesktop1.Worksheets[0].Cells[2, 1].Value = "=a1*a2";
            gridDesktop1.RunAllFormulas();
            gridDesktop1.Invalidate();
            
            [Visual Basic]
            gridDesktop1.Worksheets(0).Cells(0, 0).Value = "2"
            gridDesktop1.Worksheets(0).Cells(1, 0).Value = "3"
            gridDesktop1.Worksheets(0).Cells(2, 1).Value = "=a1*a2"
            gridDesktop1.RunAllFormulas()
            gridDesktop1.Invalidate()
            
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.#ctor">
            <summary>
            Aspose GridDesktop class
            </summary>
            
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.Clear">
            <summary>
            Clears GridDesktop control.
            </summary>
            <example>
            <code>
            [C#]
            gridDesktop1.Clear();
            gridDesktop1.Worksheets.Add();
            gridDesktop1.Worksheets.Insert(0);
            
            [Visual Basic]
            gridDesktop1.Clear()
            gridDesktop1.Worksheets.Add()
            gridDesktop1.Worksheets.Insert(0)
            
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.GetActiveWorksheet">
            <summary>
            Gets current active worksheet.
            </summary>
            <returns>Worksheet object.</returns>
            <example>
            <code>
            [C#]
            Worksheet worksheet = gridDesktop1.GetActiveWorksheet();
            
            [Visual Basic]
            Dim worksheet As Worksheet =  gridDesktop1.GetActiveWorksheet()
            
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.RefreshControl">
            <summary>
            Refresh the GridDesktop control.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.ShowStyleDialog">
            <summary>
            Opens a style dialog,to set cells style,font,colors etc.
            </summary>
            
            <example>
            
            <code>
            [C#]
            gridDesktop1.ShowStyleDialog();
            
            [Visual Basic]
            gridDesktop1.ShowStyleDialog()
            
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.ImportExcelFile(System.IO.Stream)">
            <summary>
            Imports from an excel file stream, including disk file stream or memory stream. 
            </summary>
            <example>
            <code>
            [C#]
            private void button1_Click(object sender, System.EventArgs e)
            {
            	FileStream fs = new FileStream("d:\\bookx.xls", FileMode.Open);
            	try
            	{
            		gridDesktop1.ImportExcelFile(fs);
            	}
            	catch(Exception ex)
            	{
            	}
            	finally
            	{
            		fs.Close();
            	}
            }
            
            [Visual Basic]
            Private Sub menuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles menuItem6.Click
            	Dim fs As FileStream =  New FileStream("d:\bookx.xls",FileMode.Open)
            	Try
            		gridDesktop1.ImportExcelFile(fs)
            	Catch ex As Exception
            		Throw ex
            	Finally
            		fs.Close()
            	End Try
            End Sub
            
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.ImportExcelFile(System.String)">
            <summary>
            Imports from an excel file. 
            </summary>
            
            <example>
            <code>
            [C#]
            private void button1_Click(object sender, System.EventArgs e)
            {
            	gridDesktop1.ImportExcelFile("FinancialPlan.xls");
            }
            
            [Visual Basic]
            Private Sub menuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles menuItem6.Click
            	gridDesktop1.ImportExcelFile("FinancialPlan.xls")
            End Sub
            
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.ImportExcelFile(System.String,System.Boolean)">
            <summary>
            Imports from an excel file. 
            </summary>
            <param name="fileName">excel file name.</param>
            <param name="runFormulas">if true, this method will invoke RunAllFormulas method.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.ExportExcelFile(System.IO.Stream)">
            <summary>
            Exports to a excel file stream, including disk IO stream or memory stream. 
            </summary>
            
            <example>
            <code>
            [C#]
            private void button1_Click(object sender, System.EventArgs e)
            {
            	FileStream fs = new FileStream("d:\\bookx.xls", FileMode.OpenOrCreate);
            	try
            	{
            		gridDesktop1.Worksheets.ExportExcelFile(fs);
            	}
            	catch(Exception ex)
            	{
            	}
            	finally
            	{
            		fs.Close();
            	}
            }
            
            [Visual Basic]
            Private Sub menuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles menuItem6.Click
            	Dim fs As FileStream =  New FileStream("d:\bookx.xls", FileMode.OpenOrCreate)
            	Try
            		gridDesktop1.Worksheets.ExportExcelFile(fs)
            	Catch ex As Exception
            		Throw ex
            	Finally
            		fs.Close()
            	End Try
            End Sub
            
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.ExportExcelFile(System.String)">
            <summary>
            Exports to an excel file. 
            </summary>
            <example>
            <code>
            [C#]
            private void button1_Click(object sender, System.EventArgs e)
            {
            	gridDesktop1.Worksheets.ExportExcelFile("savedemo.xls");
            }
            
            [Visual Basic]
            Private Sub menuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles menuItem7.Click
            	gridDesktop1.Worksheets.ExportExcelFile("savedemo.xls")
            End Sub
            
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.StartFormatPainter(System.Boolean)">
            <summary>
            Notifies GridDesktop to start FormatPainter.
            </summary>
            <param name="formatOnce">
            if formatOnce is true,FormatPainter can use once,
            if formatOnce is false,FormatPainter can use multi-times,until invokes EndFormatPainter().
            </param>
            <example>
            <code>
            [C#]
            gridDesktop1.StartFormatPainter(true);
            
            [Visual Basic]
            gridDesktop1.StartFormatPainter(True)
            
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.EndFormatPainter">
            <summary>
            Notifies GridDesktop to end FormatPainter.
            </summary>
            <example>
            <code>
            [C#]
            gridDesktop1.StartFormatPainter(false);
            ...
            //User Interface Operation
            ...
            gridDesktop1.EndFormatPainter();
            
            [Visual Basic]
            gridDesktop1.StartFormatPainter(False)
            ...
            'User Interface Operation
            ...
            gridDesktop1.EndFormatPainter()
            
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.Copy">
            <summary>
            Copies focused cell content to clipboard.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.Cut">
            <summary>
            Cuts focused cell content to clipboard.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.Paste">
            <summary>
            Pastes clipboard content to focused cell.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.RunAllFormulas">
            <summary>
            Runs all the cells's formula.
            </summary>
            
            <example>
            <code>
            [C#]
            gridDesktop1.Worksheets[0].Cells[0, 0].Value = "2";
            gridDesktop1.Worksheets[0].Cells[1, 0].Value = "3";
            gridDesktop1.Worksheets[0].Cells[2, 1].Value = "=a1*a2";
            gridDesktop1.RunAllFormulas();
            gridDesktop1.Invalidate();
            
            [Visual Basic]
            gridDesktop1.Worksheets(0).Cells(0, 0).Value = "2"
            gridDesktop1.Worksheets(0).Cells(1, 0).Value = "3"
            gridDesktop1.Worksheets(0).Cells(2, 1).Value = "=a1*a2"
            gridDesktop1.RunAllFormulas()
            gridDesktop1.Invalidate()
            
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="pevent"></param>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.OnResize(System.EventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridDesktop.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridDesktop.Font">
            <summary>
            Gets or sets the default font of the text displayed by the control
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridDesktop.ForeColor">
            <summary>
            Gets or sets the default foreground color of the control.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridDesktop.ColumnHeaderVisible">
            <summary>
            Gets or sets a value indicating whether column header is visible.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridDesktop.RowHeaderVisible">
            <summary>
            Gets or sets a value indicating whether row header is visible.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridDesktop.R1C1">
            <summary>
            Gets or sets a value indicating whether the control using R1C1 reference style.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridDesktop.ShowContextMenu">
            <summary>
            Gets or sets a value indicating whether the control can show context menu.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridDesktop.BorderStyle">
            <summary>
            Indicates the border style for the control.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridDesktop.SheetsBarVisible">
            <summary>
            Gets or sets a value indicating whether sheet bar is visible.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridDesktop.ActiveSheetIndex">
            <summary>
            Gets or sets the selected sheet index.
            </summary>
            
            <example>
            
            <code>
            [C#]
            gridDesktop1.ActiveSheetIndex = 0;
            
            [Visual Basic]
            gridDesktop1.ActiveSheetIndex = 0
            
            </code>
            </example>
        </member>
        <member name="E:Aspose.Grid.Desktop.GridDesktop.SelectedSheetIndexChanged">
            <summary>
            Occurs when the SelectedSheetIndex property is changed.
            </summary>
            <example>
            <code>
            [C#]
            private void gridDesktop1_SelectedSheetIndexChanged(object sender, System.EventArgs e)
            {
            	MessageBox.Show("selected index changed!");
            }
            
            [Visual Basic]
            Private  Sub gridDesktop1_SelectedSheetIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles gridDesktop1.SelectedSheetIndexChanged
            	MessageBox.Show("selected index changed!")
            End Sub
            
            </code>
            </example>
        </member>
        <member name="E:Aspose.Grid.Desktop.GridDesktop.CellDataChanged">
            <summary>
            Occurs when the grid cell data property is changed.
            </summary>
            <example>
            <code>
            [C#]
            private void gridDesktop1_CellDataChanged(object sender, Aspose.Grid.Desktop.Event.CellEventArgs e)
            {
            	MessageBox.Show("Cell Data changed!");
            }
            
            [Visual Basic]
            Private  Sub gridDesktop1_CellDataChanged(ByVal sender As Object, ByVal e As Aspose.Grid.Desktop.Event.CellEventArgs) Handles gridDesktop1.CellDataChanged
            	MessageBox.Show("Cell Data changed!")
            End Sub
            
            </code>
            </example>
        </member>
        <member name="E:Aspose.Grid.Desktop.GridDesktop.FocusedCellChanged">
            <summary>
            Occurs when the focused cell is changed.
            </summary>
        </member>
        <member name="E:Aspose.Grid.Desktop.GridDesktop.CellClick">
            <summary>
            Occurs when the gridcell is clicked.
            </summary>
        </member>
        <member name="E:Aspose.Grid.Desktop.GridDesktop.CellDoubleClick">
            <summary>
            Occurs when the gridcell is double clicked.
            </summary>
        </member>
        <member name="E:Aspose.Grid.Desktop.GridDesktop.CellKeyPressed">
            <summary>
            Occurs when a key is pressed while a cell has focus.
            </summary>
        </member>
        <member name="E:Aspose.Grid.Desktop.GridDesktop.RowHeaderClick">
            <summary>
            Occurs when the row header clicked.
            </summary>
        </member>
        <member name="E:Aspose.Grid.Desktop.GridDesktop.RowHeaderDoubleClick">
            <summary>
            Occurs when the row header double clicked.
            </summary>
        </member>
        <member name="E:Aspose.Grid.Desktop.GridDesktop.ColumnHeaderClick">
            <summary>
            Occurs when the column header clicked.
            </summary>
        </member>
        <member name="E:Aspose.Grid.Desktop.GridDesktop.ColumnHeaderDoubleClick">
            <summary>
            Occurs when the column header double clicked.
            </summary>
        </member>
        <member name="E:Aspose.Grid.Desktop.GridDesktop.CellButtonClick">
            <summary>
            Occurs when the cell button clicked.
            </summary>
        </member>
        <member name="E:Aspose.Grid.Desktop.GridDesktop.CellCheckedChanged">
            <summary>
            Occurs when the cell checkbox Checked property is changed.
            </summary>
        </member>
        <member name="E:Aspose.Grid.Desktop.GridDesktop.CellSelectedIndexChanged">
            <summary>
            Occurs when the cell combobox SelectedIndex property has changed.
            </summary>
        </member>
        <member name="E:Aspose.Grid.Desktop.GridDesktop.CommentDataChanged">
            <summary>
            Occurs when the comment data has changed. 
            </summary>
        </member>
        <member name="E:Aspose.Grid.Desktop.GridDesktop.SelectedCellRangeChanged">
            <summary>
            Occurs when the selected cellrange is changed.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridDesktop.Worksheets">
            <summary>
            Gets the Worksheets.
            </summary>
            <example>
            <code>
            [C#]
            gridDesktop1.Worksheets.Add();
            gridDesktop1.Worksheets.Insert(0);
            
            [Visual Basic]
            gridDesktop1.Worksheets.Add()
            gridDesktop1.Worksheets.Insert(0)
            
            </code>
            </example>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridDesktop.CreateParams">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.GridRow">
            <summary>
            Represents s single row in worksheet.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.GridRow.DEFAULT_HEIGHT">
            <summary>
            Default height of gridrow.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridRow.GetStyle">
            <summary>
            Gets style object of row.
            </summary>
            <returns>Style object of row.</returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridRow.SetStyle(Aspose.Grid.Desktop.Style)">
            <summary>
            Sets style object to row.
            </summary>
            <param name="style">Style object to be set.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridRow.SetStyle(Aspose.Grid.Desktop.Style,Aspose.Grid.Desktop.StyleSet)">
            <summary>
            Sets style object to row.
            </summary>
            <param name="style">Style object to be set.</param>
            <param name="styleSet">specified which properties to apply to.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridRow.GetFont">
            <summary>
            Gets font object of row.
            </summary>
            <returns>Font object of row.</returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridRow.GetFontColor">
            <summary>
            Gets font color of row.
            </summary>
            <returns>Font color of row.</returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridRow.SetFont(System.Drawing.Font)">
            <summary>
            Sets font object to row.
            </summary>
            <param name="font">Font object to be set.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.GridRow.SetFontColor(System.Drawing.Color)">
            <summary>
            Sets font color to row.
            </summary>
            <param name="color">Font color to be set.</param>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridRow.Worksheet">
            <summary>
            Gets worksheet object.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridRow.Index">
            <summary>
            Gets index of row object.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridRow.Height">
            <summary>
            Gets or sets the height of row object.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridRow.Hidden">
            <summary>
            Gets or sets the hidden of row object.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.GridRow.Header">
            <summary>
            Gets or sets the header of row object.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.GroupCollection">
            <summary>
            Summary description for Group.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.Hyperlink">
            <summary>
            Encapsulates the object that represents a hyperlink.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.Hyperlink.Clone">
            <summary>
            Clone this object.
            </summary>
            <returns>Copy of this object.</returns>
        </member>
        <member name="P:Aspose.Grid.Desktop.Hyperlink.Url">
            <summary>
            Represents the url of a hyperlink. 
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.HyperlinkCollection">
            <summary>
            Encapsulates a collection of Hyperlink objects. 
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.HyperlinkCollection.Add(System.Int32,System.Int32,System.String)">
            <summary>
            Adds a hyperlink to a specified cell at row column index.
            </summary>
            <param name="row">Row index of cell.</param>
            <param name="col">Column index of cell.</param>
            <param name="url">Url of hyperlink.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.HyperlinkCollection.Add(System.String,System.String)">
            <summary>
            Adds a hyperlink to a specified cell by cell name.
            </summary>
            <param name="cellName">Name of grid cell.</param>
            <param name="url">Url of hyperlink.</param>
        </member>
        <member name="P:Aspose.Grid.Desktop.HyperlinkCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets the hyperlink object at specified row and column index.
            </summary>
            <param name="row">row index.</param>
            <param name="col">column index.</param>
        </member>
        <member name="P:Aspose.Grid.Desktop.HyperlinkCollection.Item(System.String)">
            <summary>
            Gets the hyperlink object by specified cell name.
            </summary>
            <param name="cellName">cell name(in excel name format, like 'A1', 'F22')
            </param>
        </member>
        <member name="T:Aspose.Grid.Desktop.Picture">
            <summary>
            Encapsulates the object that represents a single picture in a spreadsheet.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.Picture.Clone">
            <summary>
            Clone this object.
            </summary>
            <returns>Copy of this object.</returns>
        </member>
        <member name="P:Aspose.Grid.Desktop.Picture.Image">
            <summary>
            Represents the Image object.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.PictureCollection">
            <summary>
            Encapsulates a collection of Picture objects. 
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.PictureCollection.Add(System.Int32,System.Int32,System.String)">
            <summary>
            Adds a Picture to a specified cell at row column index.
            </summary>
            <param name="row">Row index of cell.</param>
            <param name="col">Column index of cell.</param>
            <param name="fileName">File name of image.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.PictureCollection.Add(System.Int32,System.Int32,System.Drawing.Image)">
            <summary>
            Adds a Picture to a specified cell at row column index.
            </summary>
            <param name="row">Row index of cell.</param>
            <param name="col">Column index of cell.</param>
            <param name="image">Image.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.PictureCollection.Add(System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            Adds a Picture to a specified cell at row column index.
            </summary>
            <param name="row">Row index of cell.</param>
            <param name="col">Column index of cell.</param>
            <param name="stream">Stream of image.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.PictureCollection.Add(System.String,System.String)">
            <summary>
            Adds a Picture to a specified cell by cell name.
            </summary>
            <param name="cellName">Name of grid cell.</param>
            <param name="fileName">File name of image.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.PictureCollection.Add(System.String,System.IO.Stream)">
            <summary>
            Adds a Picture to a specified cell by cell name.
            </summary>
            <param name="cellName">Name of grid cell.</param>
            <param name="stream">Stream of image.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.PictureCollection.Add(System.String,System.Drawing.Image)">
            <summary>
            Adds a Picture to a specified cell by cell name.
            </summary>
            <param name="cellName">Name of grid cell.</param>
            <param name="image">Image.</param>
        </member>
        <member name="P:Aspose.Grid.Desktop.PictureCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets the Picture object at specified row and column index.
            </summary>
            <param name="row">row index.</param>
            <param name="col">column index.</param>
        </member>
        <member name="P:Aspose.Grid.Desktop.PictureCollection.Item(System.String)">
            <summary>
            Gets the Picture object by specified cell name.
            </summary>
            <param name="cellName">cell name(in excel name format, like 'A1', 'F22')
            </param>
        </member>
        <member name="T:Aspose.Grid.Desktop.ProtectedCellCollection">
            <summary>
            contains lock cell in a worksheet
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.RowCollection">
            <summary>
            Collects the objects that represent the individual rows in a worksheet.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.RowCollection.Item(System.Int32)">
            <summary>
            Gets a gridrow object at specified index.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.SortOrientation">
            <summary>
            Represents sorting orientation
            </summary>
            <remarks>
            SortOrientation.SortTopToBottom represents sorting datas from top to bottom and exchanging data row by row.
            SortOrientation.SortLeftToRight represents sorting datas from left to right and exchanging data column by column.
            </remarks>
        </member>
        <member name="F:Aspose.Grid.Desktop.SortOrientation.SortTopToBottom">
            <summary>
            Represents sorting datas from top to bottom and exchanging data row by row.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.SortOrientation.SortLeftToRight">
            <summary>
            Represents sorting datas from left to right and exchanging data column by column.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.SortOrder">
            <summary>
            Represents what order the data sort by.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.SortOrder.Ascending">
            <summary>
            Sorts by ascending
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.SortOrder.Descending">
            <summary>
            Sorts by descending
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.SortRange">
            <summary>
            Indicates a range of a Worksheet and provide method to sort the range datas by row or column.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.SortRange.#ctor(Aspose.Grid.Desktop.Worksheet,System.Int32,System.Int32,System.Int32,System.Int32,Aspose.Grid.Desktop.SortOrientation,System.Boolean)">
            <summary>
            Intializes a new instance of the <see cref="T:Aspose.Grid.Desktop.SortRange"/> class by specifing a worksheet range and sort orientation.
            </summary>
            <param name="worksheet">The Worksheet that contains the range.</param>
            <param name="startRow">The start row of the range.</param>
            <param name="startColumn">The start column of the range.</param>
            <param name="rows">The number of the rows.</param>
            <param name="columns">The number of the columns</param>
            <param name="orientation">The sort orientation: top to bottom or left to right.</param>
            <param name="isCaseSensitive">Determines whether the sort datas is case sensitive if datas are string</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.SortRange.Sort(System.Int32)">
            <summary>
            Sorts the datas ascend in the range by index.
            </summary>
            <param name="index">The column(or row) index that specifis the sort column(or row).
            If sort orientation is top to bottom, the index represents column index.
            If sort orientation is left to right, the index represents row index.
            </param>
        </member>
        <member name="M:Aspose.Grid.Desktop.SortRange.Sort(System.Int32,Aspose.Grid.Desktop.SortOrder)">
            <summary>
            Sorts the datas in the range by index.
            </summary>
            <param name="index">The column(or row) index that specifis the sort column(or row).
            If sort orientation is top to bottom, the index represents column index.
            If sort orientation is left to right, the index represents row index.
            </param>
            <param name="order">The sort order</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.SortRange.Sort(System.Int32[])">
            <summary>
             Sorts the datas ascend in the range by some field that are specifed by array indexes.
            </summary>
            <param name="indexes">The index array that specifies the data sorted by.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.SortRange.Sort(System.Int32[],Aspose.Grid.Desktop.SortOrder[])">
            <summary>
            Sorts the datas in the range by some field that are specifed by array indexes.
            </summary>
            <param name="indexes">The index array that specifies the data sorted by.</param>
            <param name="orders">The sort order array</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.SortRange.IndexIsValid(System.Int32)">
            <summary>
            Check the parameter index whether is valid.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.SortRange.Sort(System.Collections.ArrayList,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Aspose.Grid.Desktop.SortOrder)">
            <summary>
            Sorts the datas by sortList
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.SortRange.Sort(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Aspose.Grid.Desktop.SortOrder[])">
            <summary>
            Sorts the datas by indexes. Calls the method recursive until the length of indexes is zero.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.SortRange.ExchangeRow(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Exchange row exchangeIndex1 and row exchangeIndex2
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.SortRange.ExchangeColumn(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Exchange column exchangeIndex1 and column exchangeIndex2
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.SortField.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.SortField.Equals(System.Object)">
            <summary>
            Determines whether two Object instances are equal.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.SortField.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.SortField.ToString">
            <summary>
            Returns a String that represents the current Object
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.SortField.GetValueType(System.Int32,System.Int32,System.Object)">
            <summary>
            Get value type. 
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.ICustomValidation">
            <summary>
            Interface of a gridcell's custom validation.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.ICustomValidation.Validate(Aspose.Grid.Desktop.Worksheet,System.Int32,System.Int32,System.Object)">
            <summary>
            Validate a gridcell's data is valid or not.
            </summary>
            <param name="worksheet">Worksheet object.</param>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="value">Value to be validated.</param>
            <returns>True is valid, false is invalid.</returns>
        </member>
        <member name="T:Aspose.Grid.Desktop.Validation">
            <summary>
            Represents a gridcell's validation operation.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.Validation.Clone">
            <summary>
            Clone this object.
            </summary>
            <returns>Copy of this object.</returns>
        </member>
        <member name="P:Aspose.Grid.Desktop.Validation.IsRequired">
            <summary>
            Gets or sets whether the cell value is required. 
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Validation.RegEx">
            <summary>
            Gets or sets the regular expression string.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Validation.CustomValidation">
            <summary>
            Gets or sets the custom validation object.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Validation.CustomMsgForStopEdit">
            <summary>
            Gets or sets the custom message to show when user edits invalid value.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Validation.CustomMsgForStopOper">
            <summary>
            Gets or sets the custom message to show when user's operation brings invalid value.
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.ValidationCollection">
            <summary>
            Encapsulates a collection of validation objects. 
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.ValidationCollection.Add(System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Adds a validation to a specified cell at row column index.
            </summary>
            <param name="row">Row index of cell.</param>
            <param name="col">Column index of cell.</param>
            <param name="isRequired">Value indicating whether cell value is required.</param>
            <param name="regEx">Regular expression.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.ValidationCollection.Add(System.String,System.Boolean,System.String)">
            <summary>
            Adds a validation to a specified cell by cell name.
            </summary>
            <param name="cellName">Name of grid cell.</param>
            <param name="isRequired">Value indicating whether cell value is required.</param>
            <param name="regEx">Regular expression.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.ValidationCollection.Add(System.Int32,System.Int32,Aspose.Grid.Desktop.ICustomValidation)">
            <summary>
            Adds a validation to a specified cell at row column index.
            </summary>
            <param name="row">Row index of cell.</param>
            <param name="col">Column index of cell.</param>
            <param name="customValidation">Custom validaton object.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.ValidationCollection.Add(System.String,Aspose.Grid.Desktop.ICustomValidation)">
            <summary>
            Adds a validation to a specified cell by cell name.
            </summary>
            <param name="cellName">Name of grid cell.</param>
            <param name="customValidation">Custom validaton object.</param>
        </member>
        <member name="P:Aspose.Grid.Desktop.ValidationCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets the validation object at specified row and column index.
            </summary>
            <param name="row">row index.</param>
            <param name="col">column index.</param>
            <remarks>
            If there is not a validation object at specified row column index,
            this will check the column validation object.
            </remarks>
        </member>
        <member name="P:Aspose.Grid.Desktop.ValidationCollection.Item(System.String)">
            <summary>
            Gets the validation object by specified cell name.
            </summary>
            <param name="cellName">cell name(in excel name format, like 'A1', 'F22')
            </param>
            <remarks>
            If there is not a validation object at specified row column index,
            this will check the column validation object.
            </remarks>
        </member>
        <member name="T:Aspose.Grid.Desktop.Worksheet">
            <summary>
            Encapsulates the object that represents a single worksheet. 
            </summary>
            
        </member>
        <member name="F:Aspose.Grid.Desktop.Worksheet.DEFAULT_ROWSCOUNT">
            <summary>
            Default rows count of worksheet.
            </summary>
        </member>
        <member name="F:Aspose.Grid.Desktop.Worksheet.DEFAULT_COLUMNSCOUNT">
            <summary>
            Default columns count of worksheet.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.AddColumn">
            <summary>
            Adds a new column.
            </summary>
            
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.InsertColumn(System.Int32)">
            <summary>
            Inserts a new column.
            </summary>
            <param name="index">Index of column is inserted.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.AddRow">
            <summary>
            Adds a new row.
            </summary>
            
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.InsertRow(System.Int32)">
            <summary>
            Inserts a new row.
            </summary>
            <param name="index">row index is inserted.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.RemoveColumn(System.Int32)">
            <summary>
            Removes a column at the specified index.
            </summary>
            
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.RemoveRow(System.Int32)">
            <summary>
            Removes a row at the specified index.
            </summary>
            
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.IsCellFocused">
            <summary>
            Determines whether the cell is focused.
            </summary>
            
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.GetFocusedCell">
            <summary>
            Gets the focused cell.
            </summary>
            <returns>Cell object.</returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.GetFocusedCellLocation">
            <summary>
            Gets a cell location which is focused.
            </summary>
            
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.SetFocusedCell(Aspose.Grid.Desktop.CellLocation)">
            <summary>
            Sets the cell focus at the specified location.
            </summary>
            <param name="cellLocation">Cell location.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.SetFocusedCell(System.Int32,System.Int32)">
            <summary>
            Sets the cell focus at the specified column and row.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.ClearCell(System.Int32,System.Int32)">
            <summary>
            Clears cell's value, style, hyperlink, picture, comment etc at specified row, column.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.ClearCell(Aspose.Grid.Desktop.GridCell)">
            <summary>
            Clears cell's value, style, hyperlink, picture, comment etc.
            </summary>
            <param name="cell">GridCell object.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.ClearCell(System.String)">
            <summary>
            Clears cell's value, style, hyperlink, picture, comment etc by specified cell name.
            </summary>
            <param name="cellName">Cell name.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.GetLastSelection">
            <summary>
            Gets the cell range of last selected.
            </summary>
            
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.AddSelectedRange(Aspose.Grid.Desktop.CellRange)">
            <summary>
            Add a new selected range to the worksheet.
            </summary>
            <param name="cCellRange">The added selected range</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.InSelection(Aspose.Grid.Desktop.CellLocation)">
            <summary>
            Determines whether the specified cell location is in selected.
            </summary>
            <param name="cellLocation">Cell location.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.ColInSelection(System.Int32)">
            <summary>
            Determines whether the specified column at index is in selected.
            </summary>
            
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.RowInSelection(System.Int32)">
            <summary>
            Determines whether the specified row at index is in selected.
            </summary>
            
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.ClearSelection">
            <summary>
            Clear the selection in Worksheet.
            </summary>
            
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.CreateRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a CellRange object from a range of worksheet.
            </summary>
            <param name="startRow">Start Row index.</param>
            <param name="startColumn">Start Column index.</param>
            <param name="endRow">End Row index.</param>
            <param name="endColumn">End Column index.</param>
            <returns>A CellRange object.</returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.CreateRange(System.String,System.String)">
            <summary>
            Creates a CellRange object from a range of worksheet.
            </summary>
            <param name="startCellName">Start cell name.</param>
            <param name="endCellName">End cell name.</param>
            <returns>A CellRange object.</returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.SetStyle(Aspose.Grid.Desktop.CellRange,Aspose.Grid.Desktop.Style)">
            <summary>
            Sets style object to cellRange.
            </summary>
            <param name="range">CellRange object.</param>
            <param name="style">Style object to be set.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.SetStyle(Aspose.Grid.Desktop.CellRange,Aspose.Grid.Desktop.Style,Aspose.Grid.Desktop.StyleSet)">
            <summary>
            Sets style object to cellRange.
            </summary>
            <param name="range">CellRange object.</param>
            <param name="style">Style object to be set.</param>
            <param name="styleSet">specified which properties to apply to.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.SetFont(Aspose.Grid.Desktop.CellRange,System.Drawing.Font)">
            <summary>
            Sets font object to cellRange.
            </summary>
            <param name="range">CellRange object.</param>
            <param name="font">Font object to be set.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.SetFontColor(Aspose.Grid.Desktop.CellRange,System.Drawing.Color)">
            <summary>
            Sets font color to cellRange.
            </summary>
            <param name="range">CellRange object.</param>
            <param name="color">Font color to be set.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.ImportDataTable(System.Data.DataTable,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Imports a DataTable object into a worksheet. 
            </summary>
            <param name="dataTable">The DataTable object to be imported.</param>
            <param name="isFieldNameShown">Indicates whether the field name of the datatable will be imported to the first row.</param>
            <param name="firstRow">The row number of the first cell to import.</param>
            <param name="firstColumn">The column number of the first cell to import.</param>
            <returns>Total number of rows imported.</returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.ExportDataTable(System.Data.DataTable,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Exports data in the Cells collection of a Worksheet to a specifed DataTable object. 
            </summary>
            <param name="dataTable">The DataTable object that exports data to.</param>
            <param name="startRow">The row number of the first cell to export out.</param>
            <param name="startColumn">The column number of the first cell to export out.</param>
            <param name="rows">Number of rows to be imported.</param>
            <param name="columns">Number of columns to be imported.</param>
            <param name="isVertical">True if a row in the control represents a row in DataTable. False if a column in the control represents a row in DataTable.</param>
            <returns>Exported DataTable object.</returns>
            <remarks>The method permits first create a DataTable object. Then exports data to the DataTable object. If dataTable don't be set valid, the method will return a new DataTable object by calling overload method 'Export(bool exportColumnName, bool isVertical)'.</remarks>
            <example>
            <code>
            [C#]
            
            DataTable dataTable = new DataTable();
            dataTable.Columns.Add("Column a",System.Type.GetType("System.String"));
            dataTable.Columns.Add("Column b");
            dataTable.Columns.Add("Column c");
            dataTable.Columns.Add("Column d",System.Type.GetType("System.Double"));
            dataTable.Columns.Add("Column e",System.Type.GetType("System.Int32"));
            dataTable.Columns.Add("Column f",System.Type.GetType("System.Int32"));
            DataTable exportTable = gridDesktop.Worksheets[0].Export(dataTable,1,0,10,6,true);
            DataGrid1.SetDataBinding(exportTable, null);
            
            [VB]
            
            Dim dataTable As DataTable =  New DataTable() 
            dataTable.Columns.Add("Column a",System.Type.GetType("System.String"))
            dataTable.Columns.Add("Column b")
            dataTable.Columns.Add("Column c")
            dataTable.Columns.Add("Column d",System.Type.GetType("System.Double"))
            dataTable.Columns.Add("Column e",System.Type.GetType("System.Int32"))
            dataTable.Columns.Add("Column f",System.Type.GetType("System.Int32"))
            Dim exportTable As DataTable =  GridDesktop.Worksheets(0).Export(dataTable,1,0,10,6,True) 
            DataGrid1.SetDataBinding(exportTable)
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.ExportDataTable(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Exports data in the Cells collection of a Worksheet to a new DataTable object.
            </summary>
            <param name="startRow">The row number of the first cell to export out.</param>
            <param name="startColumn">The column number of the first cell to export out.</param>
            <param name="rows">Number of rows to be imported.</param>
            <param name="columns">Number of columns to be imported.</param>
            <param name="exportColumnName">Indicates whether the data in the first row are exported to the column name of the DataTable.</param>
            <param name="isVertical">True if a row in the control represents a row in DataTable. False if a column in the control represents a row in DataTable.</param>
            <returns>Exported DataTable object.</returns>
            <example>
            <code>
            [C#]
            
            DataTable exportTable = gridDesktop.Worksheets[0].Export(0,0,10,2,true,false);
            DataGrid1.SetDataBinding(exportTable, null);
            
            [VB]
            
            Dim exportTable As DataTable =  GridDesktop.Worksheets(0).Export(0,0,10,2,True,False) 
            DataGrid1.SetDataBinding(exportTable)
            </code>
            </example>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.DataBind(System.Object,System.String)">
            <summary>
            Binds data from data source object with Worksheet object.
            </summary>
            <param name="dataSource">The data source for GridDesktop control.</param>
            <param name="dataMember">The data member string that specifies the table to bind to within the data source object.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.DataUnbind">
            <summary>
            Unbind data from data source object with Worksheet object.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.CellIndexToName(System.Int32,System.Int32)">
            <summary>
            Gets cell name according to its row and column indexes.
            </summary>
            <param name="row">Row index.</param>
            <param name="column">Column index.</param>
            <returns>Name of cell.</returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.CellNameToIndex(System.String,System.Int32@,System.Byte@)">
            <summary>
            Gets the cell row and column indexes according to its name
            </summary>
            <param name="cellName">Name of cell.</param>
            <param name="row">Output row index</param>
            <param name="column">Output column index</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.ColumnNameToIndex(System.String)">
            <summary>
            Gets column index according to column name.
            </summary>
            <param name="columnName">Column name.</param>
            <returns>Column index.</returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.ColumnIndexToName(System.Byte)">
            <summary>
            Gets column name according to column index.
            </summary>
            <param name="column">Column index.</param>
            <returns>Name of column.</returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.R1C1ToIndex(System.String,System.Int32@,System.Byte@)">
            <summary>
            Gets the cell row and column indexes according to its R1C1 style name.
            </summary>
            <param name="r1c1">R1c1 style name.</param>
            <param name="row">Output cell row index.</param>
            <param name="column">Output cell column index.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.CellIndexToR1C1(System.Int32,System.Int32)">
            <summary>
            Gets cell r1c1 style name according to its row and column indexes.
            </summary>
            <param name="row">Row index.</param>
            <param name="column">Column index.</param>
            <returns>R1C1 style name of cell.</returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.Merge(Aspose.Grid.Desktop.CellRange)">
            <summary>
            Merges a specified range of cells into a single cell.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.Merge(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Merges a specified range of cells into a single cell.
            </summary>
            <param name="startRow">Start row.</param>
            <param name="startColumn">Start column.</param>
            <param name="endRow">End row.</param>
            <param name="endColumn">End column.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.Unmerge(Aspose.Grid.Desktop.CellRange)">
            <summary>
            Unmerges a specified range of merged cells. 
            </summary>
            <param name="range">Merged cells range.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.Unmerge(Aspose.Grid.Desktop.CellLocation)">
            <summary>
            Remove the specified cell location from merges.
            </summary>
            <param name="location">Cell location.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.Unmerge(System.Int32,System.Int32)">
            <summary>
            Remove the specified cell row column index from merges.
            </summary>
            <param name="row">Row index.</param>
            <param name="column">Column index.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.ClearMerges">
            <summary>
            Clear all merges.
            </summary>
            
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.CellInMerged(Aspose.Grid.Desktop.CellLocation)">
            <summary>
            Gets a value whether the specified cell location is in merges.
            </summary>
            
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.MergeFocused(Aspose.Grid.Desktop.CellLocation)">
            <summary>
            Gets the index of the focused merge.
            </summary>
            
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.ColInMerged(System.Int32)">
            <summary>
            Gets a value that indicates whether the specified column in merges. 
            </summary>
            
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.RowInMerged(System.Int32)">
            <summary>
            Gets a value that indicates whether the specified row in merges.
            </summary>
            
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.GetMerge(System.Int32)">
            <summary>
            Gets the cell range of the merge at the specified index.
            </summary>
            
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.CellRangeInMerge(Aspose.Grid.Desktop.CellRange)">
            <summary>
            Gets a value that indicates whether the specified cell range in merges.
            </summary>
            
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.GroupRows(System.Int32,System.Int32)">
            <summary>
            Groups rows.
            </summary>
            <param name="firstRow">The first row index to be grouped.</param>
            <param name="lastRow">The last row index to be grouped.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.GroupRows(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Groups rows.
            </summary>
            <param name="firstRow">The first row index to be grouped.</param>
            <param name="lastRow">The last row index to be grouped.</param>
            <param name="isHidden">Specifies if the grouped rows are shown.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.UngroupRows(System.Int32,System.Int32)">
            <summary>
            Ungroups rows.
            </summary>
            <param name="firstRow">The first row index to be ungrouped.</param>
            <param name="lastRow">The last row index to be ungrouped.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.GroupColumns(System.Int32,System.Int32)">
            <summary>
            Groups columns.
            </summary>
            <param name="firstColumn">The first column index to be grouped.</param>
            <param name="lastColumn">The last column index to be grouped.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.GroupColumns(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Groups columns.
            </summary>
            <param name="firstColumn">The first column index to be grouped.</param>
            <param name="lastColumn">The last column index to be grouped.</param>
            <param name="isHidden">Specifies if the grouped columns are hidden</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.UngroupColumns(System.Int32,System.Int32)">
            <summary>
            Ungroups columns.
            </summary>
            <param name="firstColumn">The first column index to ungrouped.</param>
            <param name="lastColumn">The last column index to ungrouped.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.AutoFitColumn(System.Int32,System.Int32,System.Int32)">
            <summary>
            Autofits the column width. This method autofits a column
            based on content in a range of cells within the column
            from startRow to endRow. AutoFitColumn is an imprecise function.
            </summary>
            <param name="columnIndex">column index, zero based</param>
            <param name="startRow">start row index, zero based</param>
            <param name="endRow">end row index, zero based</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.AutoFitColumn(System.Int32)">
            <summary>
            Autofits the column width. This method autofits a column
            based on content in a range of cells within the column.
            AutoFitColumn is an imprecise function.
            </summary>
            <param name="columnIndex">column index,zero based</param>     
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.AutoFitColumns(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Autofits columns width in a rectangle range.
            AutoFitColumns is an imprecise function.
            </summary>
            <param name="startRow">start row index, zero based</param>
            <param name="startColumn">column index, zero based</param>
            <param name="endRow">end row index, zero based</param>
            <param name="endColumn">column index, zero based</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.AutoFitColumns(System.Int32,System.Int32)">
            <summary>
            Autofits columns width from startColumn to endColumn.
            AutoFitColumns is an imprecise function.
            </summary>
            <param name="startColumn">start column index, zero based</param>
            <param name="endColumn">end column index, zero based</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.AutoFitColumns">
            <summary>
            Autofits all columns width in this worksheet.
            AutoFitColumns is an imprecise function.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.AutoFitRow(System.Int32,System.Int32,System.Int32)">
            <summary>
            Autofits the row height. This method autofits a row
            based on content in a range of cells within the row
            from startColumn to endColumn. AutoFitRow is an imprecise function.
            </summary>
            <param name="rowIndex">row index, zero based</param>
            <param name="startColumn">start column index, zero based</param>
            <param name="endColumn">end column index, zero based</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.AutoFitRow(System.Int32)">
            <summary>
            Autofits the row height. This method autofits a row
            based on content in a range of cells within the row.
            AutoFitRow is an imprecise function.
            </summary>
            <param name="rowIndex">row index, zero based</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.AutoFitRows(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Autofits rows height in a rectangle range.
            AutoFitRows is an imprecise function.
            </summary>
            <param name="startRow">start row index, zero based</param>
            <param name="startColumn">column index, zero based</param>
            <param name="endRow">end row index, zero based</param>
            <param name="endColumn">column index, zero based</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.AutoFitRows(System.Int32,System.Int32)">
            <summary>
            Autofits rows height from startRow to endRow.
            AutoFitRows is an imprecise function.
            </summary>
            <param name="startRow">start row index, zero based</param>
            <param name="endRow">end row index, zero based</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.AutoFitRows">
            <summary>
            Autofits all rows height in this worksheet.
            AutoFitRows is an imprecise function.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.SetFirstVisibleColumn(System.Int32)">
            <summary>
            Set the first visible column index of sheet view.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.GetFirstVisibleColumn">
            <summary>
            Get the first visible column index of sheet view.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.SetFirstVisibleRow(System.Int32)">
            <summary>
            Set the first visible row index of sheet view.
            </summary>
        </member>
        <member name="M:Aspose.Grid.Desktop.Worksheet.GetFirstVisibleRow">
            <summary>
            Get the first visible row index of sheet view.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Worksheet.GridDesktop">
            <summary>
            Gets Sheet's GridDesktop object.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Worksheet.Protected">
            <summary>
            Gets or sets whether worksheet object is protected.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Worksheet.ShowGridlines">
            <summary>
            Show or hide the gridlines.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Worksheet.Name">
            <summary>
            Gets or sets the name of the sheet.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Worksheet.FrozenRows">
            <summary>
            Gets or sets Worksheet's frozen row count.
            Frozen will start at first row.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Worksheet.FrozenCols">
            <summary>
            Gets or sets Worksheet's frozen column count.
            Frozen will start at first column.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Worksheet.FocusedCellLocation">
            <summary>
            Gets the cell location which is focused.
            </summary>
            
        </member>
        <member name="P:Aspose.Grid.Desktop.Worksheet.Hyperlinks">
            <summary>
            Gets the hyperlink collection.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Worksheet.Pictures">
            <summary>
            Gets the picture collection.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Worksheet.Comments">
            <summary>
            Gets the comment collection.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Worksheet.Controls">
            <summary>
            Gets the cell control collection.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Worksheet.Validations">
            <summary>
            Gets the validation collection.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Worksheet.ColumnsCount">
            <summary>
            Gets or sets the columns count of the Worksheet.
            </summary>
            
        </member>
        <member name="P:Aspose.Grid.Desktop.Worksheet.RowsCount">
            <summary>
            Gets or sets the rows count of the Worksheet.
            </summary>
            
        </member>
        <member name="P:Aspose.Grid.Desktop.Worksheet.Cells">
            <summary>
            Gets the collection of cells that belong to this worksheet.
            </summary>
            
        </member>
        <member name="P:Aspose.Grid.Desktop.Worksheet.Columns">
            <summary>
            Gets the collection of columns that belong to this Worksheet.
            </summary>
            
        </member>
        <member name="P:Aspose.Grid.Desktop.Worksheet.Rows">
            <summary>
            Gets the collection of rows that belong to this Worksheet.
            </summary>
            
        </member>
        <member name="P:Aspose.Grid.Desktop.Worksheet.DataSource">
            <summary>
            Gets the specific list in a DataSource for Worksheet object.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Worksheet.DataMember">
            <summary>
            Gets the data source that the Worksheet object is displaying data for.
            </summary>
        </member>
        <member name="P:Aspose.Grid.Desktop.Worksheet.MergesCount">
            <summary>
            Gets the count of the merges 
            </summary>
        </member>
        <member name="T:Aspose.Grid.Desktop.WorksheetCollection">
            <summary>
            Encapsulates a collection of Worksheet objects.
            </summary>
            
        </member>
        <member name="M:Aspose.Grid.Desktop.WorksheetCollection.Add">
            <summary>
            Adds a new worksheet,this worksheet row count is 256,column count is 32.
            The worksheet name will be generated by Add() method.
            </summary>
            <returns>Return Worksheet object is added.</returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.WorksheetCollection.Add(System.String)">
            <summary>
            Adds a new worksheet,this worksheet row count is 256,column count is 32.
            </summary>
            <param name="sheetName">Specifies the sheet name.</param>
            <returns>If the sheet name has exist,return null.
            Otherwise return Worksheet object is added.
            </returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.WorksheetCollection.Add(System.String,System.Int32,System.Int32)">
            <summary>
            Adds a new worksheet.
            </summary>
            <param name="sheetName">Specifies the sheet name.</param>
            <param name="rowsCount">Specifies rows count.</param>
            <param name="columnsCount">Specifies columns count.</param>
            <returns>If the sheet name has exist,return null,
            and if rowsCount or columnsCount is less or equal 0,return null.
            Otherwise return Worksheet object is added.
            </returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.WorksheetCollection.Insert(System.Int32)">
            <summary>
            Inserts an worksheet into the WorksheetCollection at the specified index.
            This worksheet row count is 256,column count is 32.
            The worksheet name will be generated by Add() method.
            </summary>
            <param name="index">The zero-based index at which worksheet should be inserted.</param>
            <returns>Return Worksheet object is added.</returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.WorksheetCollection.Insert(System.Int32,System.String)">
            <summary>
            Inserts an worksheet into the WorksheetCollection at the specified index.
            This worksheet row count is 256,column count is 32.
            </summary>
            <param name="index">The zero-based index at which worksheet should be inserted.</param>
            <param name="sheetName">Specifies the sheet name.</param>
            <returns>If the sheet name has exist,return null.
            Otherwise return Worksheet object is added.
            </returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.WorksheetCollection.Insert(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Inserts an worksheet into the WorksheetCollection at the specified index.
            </summary>
            <param name="index">The zero-based index at which worksheet should be inserted.</param>
            <param name="sheetName">Specifies the sheet name.</param>
            <param name="rowsCount">Specifies the sheet name.</param>
            <param name="columnsCount">Specifies columns count.</param>
            <returns>
            If the sheet name has exist,return null,
            and if rowsCount or columnsCount is less or equal 0,return null.
            Otherwise return Worksheet object is added.
            </returns>
        </member>
        <member name="M:Aspose.Grid.Desktop.WorksheetCollection.Remove(Aspose.Grid.Desktop.Worksheet)">
            <summary>
            Removes the first occurrence of a specific sheet from the WorksheetCollection.
            If the specific sheet is the last sheet,after removes sheet,will add a new sheet to the WorksheetCollection.
            </summary>
            <param name="sheet">
            The sheet to remove from the WorksheetCollection. The sheet can be a null reference (Nothing in Visual Basic).
            </param>
        </member>
        <member name="M:Aspose.Grid.Desktop.WorksheetCollection.Remove(System.Int32)">
            <summary>
            Removes the worksheet at the specified index of the WorksheetCollection.
            If the specific sheet is the last sheet,after removes sheet,will add a new sheet to the WorksheetCollection.
            </summary>
            <param name="index">The zero-based index of the worksheet to remove.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.WorksheetCollection.Remove(System.String)">
            <summary>
            Removes the worksheet by the specified sheetName.
            If the specific sheet is the last sheet,after removes sheet,will add a new sheet to the WorksheetCollection.
            </summary>
            <param name="sheetName">The name of the worksheet to remove.</param>
        </member>
        <member name="M:Aspose.Grid.Desktop.WorksheetCollection.IndexOf(Aspose.Grid.Desktop.Worksheet)">
            <summary>
            Searches for the specified sheet and returns the zero-based index of the first occurrence within the entire WorksheetCollection.
            </summary>
            <param name="sheet">
            The sheet to locate in the WorksheetCollection. The sheet can be a null reference (Nothing in Visual Basic).
            </param>
            <returns></returns>
        </member>
        <member name="P:Aspose.Grid.Desktop.WorksheetCollection.Item(System.Int32)">
            <summary>
            Gets the worksheet at the specified index. 
            </summary>
            
        </member>
        <member name="P:Aspose.Grid.Desktop.WorksheetCollection.Item(System.String)">
            <summary>
            Gets the worksheet by the specified name. 
            </summary>
            
        </member>
        <member name="P:Aspose.Grid.Desktop.WorksheetCollection.Count">
            <summary>
            Gets the number of elements contained in the WorksheetCollection instance.
            </summary>
        </member>
    </members>
</doc>
