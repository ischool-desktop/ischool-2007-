using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;
using SmartSchool.StudentRelated;
using IntelliSchool.DSA30.Util;
using SmartSchool.TagManage;

namespace SmartSchool.Evaluation.ScoreCalcRule
{
    public class ScoreCalcRuleInfo
    {
        private readonly string _ID;
        private readonly string _Name;
        private readonly XmlElement _ScoreCalcRuleElement;
        //private readonly bool _DefinedSubjectInfoByGPlan;

        internal ScoreCalcRuleInfo(XmlElement scrElement)
        {
            _ID = scrElement.GetAttribute("ID");
            _Name = scrElement.SelectSingleNode("Name").InnerText;
            _ScoreCalcRuleElement = (XmlElement)scrElement.SelectSingleNode("Content/ScoreCalcRule");
            //_DefinedSubjectInfoByGPlan = false;
            //if (_ScoreCalcRuleElement.SelectSingleNode("學分及修課資訊採計方式") == null || ((XmlElement)_ScoreCalcRuleElement.SelectSingleNode("學分及修課資訊採計方式")).GetAttribute("由課程規劃表取得") == "True")
            //    _DefinedSubjectInfoByGPlan = true;
        }

        public string ID { get { return _ID; } }
        public string Name { get { return _Name; } }
        //public bool DefinedSubjectInfoByGPlan{get { return _DefinedSubjectInfoByGPlan; }}
        public XmlElement ScoreCalcRuleElement
        {
            get
            {
                return (XmlElement)(new XmlDocument().ImportNode(_ScoreCalcRuleElement, true));
            }
        }

        public XmlElement CalculateSemesterEntryScore(XmlElement semesterSubjectScore)
        {
            Dictionary<string, int> entryCreditCount = new Dictionary<string, int>();
            Dictionary<string, List<decimal>> entrySubjectScores = new Dictionary<string, List<decimal>>();
            Dictionary<string, decimal> entryDividend = new Dictionary<string, decimal>();

            //bool _DefinedSubjectInfoByGPlan = false;

            //if (_ScoreCalcRuleElement.SelectSingleNode("學分及修課資訊採計方式")== null ||((XmlElement)_ScoreCalcRuleElement.SelectSingleNode("學分及修課資訊採計方式")).GetAttribute("由課程規劃表取得") == "True")
            //    _DefinedSubjectInfoByGPlan = true;

            //if (gPlan == null && _DefinedSubjectInfoByGPlan)
            //    return null;

            #region 將成績分到各分項類別中
            foreach (XmlNode subjectNode in semesterSubjectScore.SelectNodes("Subject"))
            {
                XmlElement subjectElement = (XmlElement)subjectNode;
                //不計學分或不需評分不用算
                if (subjectElement.GetAttribute("不需評分") == "是" || subjectElement.GetAttribute("不計學分") == "是")
                    continue;
                #region 分項類別跟學分數
                //string entry = (_DefinedSubjectInfoByGPlan ? gPlan.GetSubjectInfo(subjectElement.GetAttribute("科目"), subjectElement.GetAttribute("科目級別")).Entry : subjectElement.GetAttribute("開課分項類別"));
                //int credit = 0;
                //int.TryParse((_DefinedSubjectInfoByGPlan ? gPlan.GetSubjectInfo(subjectElement.GetAttribute("科目"), subjectElement.GetAttribute("科目級別")).Credit : subjectElement.GetAttribute("開課學分數")), out credit);
                string entry = subjectElement.GetAttribute("開課分項類別");
                int credit = 0;
                int.TryParse(subjectElement.GetAttribute("開課學分數"), out credit);                
                #endregion
                decimal maxScore=0;
                #region 取得最高分數
                decimal tryParseDecimal;
                if (decimal.TryParse(subjectElement.GetAttribute("原始成績"), out tryParseDecimal))
                    maxScore = tryParseDecimal;
                if (decimal.TryParse(subjectElement.GetAttribute("學年調整成績"), out tryParseDecimal) && maxScore < tryParseDecimal)
                    maxScore = tryParseDecimal;
                if (decimal.TryParse(subjectElement.GetAttribute("擇優採計成績"), out tryParseDecimal) && maxScore < tryParseDecimal)
                    maxScore = tryParseDecimal;
                if (decimal.TryParse(subjectElement.GetAttribute("補考成績"), out tryParseDecimal) && maxScore < tryParseDecimal)
                    maxScore = tryParseDecimal;
                if (decimal.TryParse(subjectElement.GetAttribute("重修成績"), out tryParseDecimal) && maxScore < tryParseDecimal)
                    maxScore = tryParseDecimal;
                #endregion
                switch (entry)
                {
                    case "體育":
                    case "國防通識":                      
                    case "健康與護理":                       
                    case "實習科目":
                        //計算分項成績
                        if (_ScoreCalcRuleElement.SelectSingleNode("分項成績計算項目") == null || ((XmlElement)_ScoreCalcRuleElement.SelectSingleNode("分項成績計算項目/" + entry )).GetAttribute("計算成績") == "True")
                        {                            
                            //加總學分數
                            if (!entryCreditCount.ContainsKey(entry))
                                entryCreditCount.Add(entry, credit);
                            else
                                entryCreditCount[entry] += credit;
                            //加入將成績資料分項
                            if (!entrySubjectScores.ContainsKey(entry)) entrySubjectScores.Add(entry, new List<decimal>());
                            entrySubjectScores[entry].Add(maxScore);
                            //加權總計
                            if (!entryDividend.ContainsKey(entry))
                                entryDividend.Add(entry, maxScore * credit);
                            else
                                entryDividend[entry] += (maxScore * credit);
                        }
                        //將科目成績與學業成績一併計算
                        if (_ScoreCalcRuleElement.SelectSingleNode("分項成績計算項目") != null && ((XmlElement)_ScoreCalcRuleElement.SelectSingleNode("分項成績計算項目/" + entry)).GetAttribute("併入學期學業成績") == "True")
                        {
                            //加總學分數
                            if (!entryCreditCount.ContainsKey("學業"))
                                entryCreditCount.Add("學業", credit);
                            else
                                entryCreditCount["學業"] += credit;
                            //加入將成績資料分項
                            if (!entrySubjectScores.ContainsKey("學業")) entrySubjectScores.Add("學業", new List<decimal>());
                            entrySubjectScores["學業"].Add(maxScore);
                            //加權總計
                            if (!entryDividend.ContainsKey("學業"))
                                entryDividend.Add("學業", maxScore * credit);
                            else
                                entryDividend["學業"] += (maxScore*credit);
                        }
                        break;

                    case "學業":
                    default:
                        //加總學分數
                        if (!entryCreditCount.ContainsKey("學業"))
                            entryCreditCount.Add("學業", credit);
                        else
                            entryCreditCount["學業"] += credit;
                        //加入將成績資料分項
                        if (!entrySubjectScores.ContainsKey("學業")) entrySubjectScores.Add("學業", new List<decimal>());
                        entrySubjectScores["學業"].Add(maxScore);
                        //加權總計
                        if (!entryDividend.ContainsKey("學業"))
                            entryDividend.Add("學業", maxScore * credit);
                        else
                            entryDividend["學業"] += (maxScore * credit);
                        break;
                }
            } 
            #endregion

            XmlDocument doc = new XmlDocument();
            XmlElement entryScoreRoot = doc.CreateElement("SemesterEntryScore");
            #region 處理計算各分項類別的成績
            foreach (string entry in entryCreditCount.Keys)
            {
                decimal entryScore=0;
                #region 計算entryScore
                if (entryCreditCount[entry] == 0)
                {
                    //學分加總為0，不做加權直接取平均               
                    foreach (decimal score in entrySubjectScores[entry])
                    {
                        entryScore += score;
                    }
                    entryScore = (entryScore / entrySubjectScores[entry].Count);
                }
                else
                {
                    //用加權總分除學分數
                    entryScore = (entryDividend[entry] / entryCreditCount[entry]);
                } 
                #endregion
                #region 精準位數處理
                XmlElement element = (XmlElement)_ScoreCalcRuleElement.SelectSingleNode("各項成績計算位數/學期分項成績計算位數");
                if (element!= null)
                {
                    int decimals;
                    SmartSchool.Evaluation.WearyDogComputer.RoundMode mode;
                    bool tryParseBool;
                    if (!int.TryParse(element.GetAttribute("位數"), out decimals))
                        decimals = 2;
                    if(bool.TryParse(element.GetAttribute("四捨五入"),out tryParseBool)&&tryParseBool)
                        mode= SmartSchool.Evaluation.WearyDogComputer.RoundMode.四捨五入;
                    else if (bool.TryParse(element.GetAttribute("無條件進位"), out tryParseBool) && tryParseBool)
                        mode = SmartSchool.Evaluation.WearyDogComputer.RoundMode.無條件進位;
                    else if (bool.TryParse(element.GetAttribute("無條件捨去"), out tryParseBool) && tryParseBool)
                        mode = SmartSchool.Evaluation.WearyDogComputer.RoundMode.無條件捨去;                    
                    else
                        mode = SmartSchool.Evaluation.WearyDogComputer.RoundMode.四捨五入;
                    entryScore = GetRoundScore(entryScore, decimals, mode);
                }
                else
                    entryScore = GetRoundScore(entryScore,2, SmartSchool.Evaluation.WearyDogComputer.RoundMode.四捨五入);


                #endregion
                #region 填入Xml
                XmlElement entryElement = doc.CreateElement("Entry");
                entryElement.SetAttribute("分項", entry);
                entryElement.SetAttribute("成績", entryScore.ToString());
                entryScoreRoot.AppendChild(entryElement);
                #endregion
            }
            #endregion
            return entryScoreRoot;
        }

        public decimal GetStudentPassScore(BriefStudentData student, int gradeYear)
        {
            string childElement;
            switch ( gradeYear )
            {
                case 1: childElement = "一年級及格標準"; break;
                case 2: childElement = "二年級及格標準"; break;
                case 3: childElement = "三年級及格標準"; break;
                case 4: childElement = "四年級及格標準"; break;
                default: childElement = "超過了啦"; break;
            }
            decimal passScore = decimal.MaxValue, tryPraseScore;
            DSXmlHelper helper = new DSXmlHelper(_ScoreCalcRuleElement);
            foreach ( XmlElement element in helper.GetElements("及格標準/學生類別") )
            {
                string tagName = element.GetAttribute("類別");
                if ( tagName == "預設" && decimal.TryParse(element.GetAttribute(childElement), out tryPraseScore) )
                {
                    if ( tryPraseScore < passScore )
                        passScore = tryPraseScore;
                }
                else
                {
                    foreach ( TagInfo tag in student.Tags )
                    {
                        if ( ( ( tag.Prefix == "" && tagName == tag.Name ) || tagName == tag.FullName ) && decimal.TryParse(element.GetAttribute(childElement), out tryPraseScore) )
                        {
                            if ( tryPraseScore < passScore )
                                passScore = tryPraseScore;
                            break;
                        }
                    }
                }
            }
            if ( passScore == decimal.MaxValue )
                passScore = 60;
            return passScore;
        }

        private enum RoundMode { 四捨五入, 無條件進位, 無條件捨去 }
        private decimal GetRoundScore(decimal entryScore, int decimals, SmartSchool.Evaluation.WearyDogComputer.RoundMode mode)
        {
            return WearyDogComputer.GetRoundScore(entryScore,decimals,mode);
        }
    }
}
